; Generated by Isabelle/LLVM-shallow
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"



declare void @isabelle_llvm_free(i8*)
declare i8* @isabelle_llvm_calloc(i64, i64)


define void @LLVM_DS_Array_arraycpy(i8* %dst, i8* %src, i64 %n) {

  start:
    br label %while_start

  while_start:
    %i = phi i64 [ %x1, %while_body ], [ 0, %start ]
    %x = icmp ult i64 %i, %n
    br i1 %x, label %while_body, label %while_end

  while_body:
    %xa = getelementptr i8, i8* %src, i64 %i
    %xaa = load i8, i8* %xa
    %p = getelementptr i8, i8* %dst, i64 %i
    store i8 %xaa, i8* %p
    %x1 = add i64 %i, 1
    br label %while_start

  while_end:
    ret void
}

define void @LLVM_DS_NArray_narray_free(i8* %p) {

  start:
    %a = ptrtoint i8* %p to i64
    %b = ptrtoint i8* null to i64
    %tmp = icmp eq i64 %a, %b
    br i1 %tmp, label %then, label %else

  then:
    br label %ctd_if

  else:
    %c = bitcast i8* %p to i8*
    call void @isabelle_llvm_free (i8* %c)
    br label %ctd_if

  ctd_if:
    ret void
}

define i8 @llstrcmp({ i64, { i64, i8* } }* %ap, { i64, { i64, i8* } }* %bp) {

  start:
    %a = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %ap
    %b = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %bp
    %r = call i1 @Sorting_Strings_strcmp_impl ({ i64, { i64, i8* } } %a, { i64, { i64, i8* } } %b)
    %tmp = icmp ne i1 %r, 0
    br i1 %tmp, label %then, label %else

  then:
    br label %ctd_if

  else:
    br label %ctd_if

  ctd_if:
    %x = phi i8 [ 0, %else ], [ 1, %then ]
    ret i8 %x
}

define void @str_init({ i64, { i64, i8* } }* %sp) {

  start:
    store { i64, { i64, i8* } } zeroinitializer, { i64, { i64, i8* } }* %sp
    ret void
}

define i64 @Sorting_Log2_word_clz_impl(i64 %x) {

  start:
    %x1 = icmp eq i64 %x, 0
    br i1 %x1, label %then, label %else

  then:
    br label %ctd_if

  else:
    %x2 = call i64 @Sorting_Log2_word_clz_impl1 (i64 %x)
    br label %ctd_if

  ctd_if:
    %x3 = phi i64 [ %x2, %else ], [ 64, %then ]
    ret i64 %x3
}

define i64 @Sorting_Log2_word_clz_impl1(i64 %x) {

  start:
    %x1 = insertvalue { i64, i64 } zeroinitializer, i64 0, 0
    %xa = insertvalue { i64, i64 } %x1, i64 %x, 1
    br label %while_start

  while_start:
    %xb = phi { i64, i64 } [ %x4, %while_body ], [ %xa, %start ]
    %a1 = extractvalue { i64, i64 } %xb, 0
    %x2 = extractvalue { i64, i64 } %xb, 1
    %x3 = icmp slt i64 0, %x2
    br i1 %x3, label %while_body, label %while_end

  while_body:
    %a11 = extractvalue { i64, i64 } %xb, 0
    %a2 = extractvalue { i64, i64 } %xb, 1
    %xaa = add i64 %a11, 1
    %xba = shl i64 %a2, 1
    %xca = insertvalue { i64, i64 } zeroinitializer, i64 %xaa, 0
    %x4 = insertvalue { i64, i64 } %xca, i64 %xba, 1
    br label %while_start

  while_end:
    %a12 = extractvalue { i64, i64 } %xb, 0
    %a21 = extractvalue { i64, i64 } %xb, 1
    ret i64 %a12
}

define i1 @Sorting_Strings_strcmp_impl({ i64, { i64, i8* } } %x, { i64, { i64, i8* } } %x1) {

  start:
    %l = extractvalue { i64, { i64, i8* } } %x, 0
    %x2 = extractvalue { i64, { i64, i8* } } %x, 1
    %c = extractvalue { i64, i8* } %x2, 0
    %a = extractvalue { i64, i8* } %x2, 1
    %la = extractvalue { i64, { i64, i8* } } %x1, 0
    %xb = extractvalue { i64, { i64, i8* } } %x1, 1
    %ca = extractvalue { i64, i8* } %xb, 0
    %aa = extractvalue { i64, i8* } %xb, 1
    %xd = icmp sle i64 %l, %la
    br i1 %xd, label %then, label %else

  then:
    %lb = extractvalue { i64, { i64, i8* } } %x, 0
    %xe = extractvalue { i64, { i64, i8* } } %x, 1
    %cb = extractvalue { i64, i8* } %xe, 0
    %ab = extractvalue { i64, i8* } %xe, 1
    br label %ctd_if

  else:
    %lb1 = extractvalue { i64, { i64, i8* } } %x1, 0
    %xe1 = extractvalue { i64, { i64, i8* } } %x1, 1
    %cb1 = extractvalue { i64, i8* } %xe1, 0
    %ab1 = extractvalue { i64, i8* } %xe1, 1
    br label %ctd_if

  ctd_if:
    %xe2 = phi i64 [ %lb1, %else ], [ %lb, %then ]
    %xf = insertvalue { i64, i2 } zeroinitializer, i64 0, 0
    %xg = insertvalue { i64, i2 } %xf, i2 0, 1
    br label %while_start

  while_start:
    %xfa = phi { i64, i2 } [ %x9, %ctd_ifa ], [ %xg, %ctd_if ]
    %a1 = extractvalue { i64, i2 } %xfa, 0
    %a2 = extractvalue { i64, i2 } %xfa, 1
    %xga = icmp slt i64 %a1, %xe2
    %x3 = icmp eq i2 %a2, 0
    %x4 = and i1 %xga, %x3
    br i1 %x4, label %while_body, label %while_end

  while_body:
    %a11 = extractvalue { i64, i2 } %xfa, 0
    %a21 = extractvalue { i64, i2 } %xfa, 1
    %lb2 = extractvalue { i64, { i64, i8* } } %x, 0
    %xga1 = extractvalue { i64, { i64, i8* } } %x, 1
    %cb2 = extractvalue { i64, i8* } %xga1, 0
    %ab2 = extractvalue { i64, i8* } %xga1, 1
    %xh = getelementptr i8, i8* %ab2, i64 %a11
    %xi = load i8, i8* %xh
    %lc = extractvalue { i64, { i64, i8* } } %x1, 0
    %xj = extractvalue { i64, { i64, i8* } } %x1, 1
    %cc = extractvalue { i64, i8* } %xj, 0
    %ac = extractvalue { i64, i8* } %xj, 1
    %xk = getelementptr i8, i8* %ac, i64 %a11
    %xl = load i8, i8* %xk
    %xm = icmp eq i8 %xi, %xl
    br i1 %xm, label %thena, label %elsea

  thena:
    %xna = add i64 %a11, 1
    %xo = insertvalue { i64, i2 } zeroinitializer, i64 %xna, 0
    %x5 = insertvalue { i64, i2 } %xo, i2 0, 1
    br label %ctd_ifa

  elsea:
    %xn = icmp ult i8 %xi, %xl
    br i1 %xn, label %thenb, label %elseb

  thenb:
    %xoa = add i64 %a11, 1
    %xp = insertvalue { i64, i2 } zeroinitializer, i64 %xoa, 0
    %x6 = insertvalue { i64, i2 } %xp, i2 -1, 1
    br label %ctd_ifb

  elseb:
    %xoa1 = add i64 %a11, 1
    %xp1 = insertvalue { i64, i2 } zeroinitializer, i64 %xoa1, 0
    %x7 = insertvalue { i64, i2 } %xp1, i2 1, 1
    br label %ctd_ifb

  ctd_ifb:
    %x8 = phi { i64, i2 } [ %x7, %elseb ], [ %x6, %thenb ]
    br label %ctd_ifa

  ctd_ifa:
    %x9 = phi { i64, i2 } [ %x8, %ctd_ifb ], [ %x5, %thena ]
    br label %while_start

  while_end:
    %a12 = extractvalue { i64, i2 } %xfa, 0
    %xga2 = extractvalue { i64, i2 } %xfa, 1
    %xha = icmp eq i2 %xga2, -1
    br i1 %xha, label %thenc, label %elsec

  thenc:
    br label %ctd_ifc

  elsec:
    %xia = icmp eq i2 %xga2, 0
    br i1 %xia, label %thend, label %elsed

  thend:
    %lb3 = extractvalue { i64, { i64, i8* } } %x, 0
    %xj1 = extractvalue { i64, { i64, i8* } } %x, 1
    %cb3 = extractvalue { i64, i8* } %xj1, 0
    %ab3 = extractvalue { i64, i8* } %xj1, 1
    %lc1 = extractvalue { i64, { i64, i8* } } %x1, 0
    %xl1 = extractvalue { i64, { i64, i8* } } %x1, 1
    %cc1 = extractvalue { i64, i8* } %xl1, 0
    %ac1 = extractvalue { i64, i8* } %xl1, 1
    %x10 = icmp slt i64 %lb3, %lc1
    br label %ctd_ifd

  elsed:
    br label %ctd_ifd

  ctd_ifd:
    %x11 = phi i1 [ 0, %elsed ], [ %x10, %thend ]
    br label %ctd_ifc

  ctd_ifc:
    %x12 = phi i1 [ %x11, %ctd_ifd ], [ 1, %thenc ]
    ret i1 %x12
}

define void @str_append({ i64, { i64, i8* } }* %sp, i8 %x) {

  start:
    %s = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %sp
    %l = extractvalue { i64, { i64, i8* } } %s, 0
    %x1 = extractvalue { i64, { i64, i8* } } %s, 1
    %c = extractvalue { i64, i8* } %x1, 0
    %a = extractvalue { i64, i8* } %x1, 1
    %lb = add i64 %l, 1
    %lc = extractvalue { i64, { i64, i8* } } %s, 0
    %xaa = extractvalue { i64, { i64, i8* } } %s, 1
    %ca = extractvalue { i64, i8* } %xaa, 0
    %aa = extractvalue { i64, i8* } %xaa, 1
    %cok = icmp sle i64 %lb, %ca
    br i1 %cok, label %then, label %else

  then:
    %xb = insertvalue { i64, { i64, i8* } } zeroinitializer, i64 %lc, 0
    %xc = insertvalue { i64, i8* } zeroinitializer, i64 %ca, 0
    %x2 = insertvalue { i64, i8* } %xc, i8* %aa, 1
    %x3 = insertvalue { i64, { i64, i8* } } %xb, { i64, i8* } %x2, 1
    br label %ctd_if

  else:
    %xb1 = insertvalue { i64, i8* } zeroinitializer, i64 %ca, 0
    %tmpa = insertvalue { i64, i8* } %xb1, i8* %aa, 1
    %xc1 = insertvalue { i64, { i64, i8* } } zeroinitializer, i64 %lc, 0
    %x4 = insertvalue { i64, { i64, i8* } } %xc1, { i64, i8* } %tmpa, 1
    %x5 = call { i64, { i64, i8* } } @LLVM_DS_Array_List_arl_resize (i64 %lb, { i64, { i64, i8* } } %x4)
    br label %ctd_if

  ctd_if:
    %al = phi { i64, { i64, i8* } } [ %x5, %else ], [ %x3, %then ]
    %ld = extractvalue { i64, { i64, i8* } } %al, 0
    %xb2 = extractvalue { i64, { i64, i8* } } %al, 1
    %cb = extractvalue { i64, i8* } %xb2, 0
    %ab = extractvalue { i64, i8* } %xb2, 1
    %p = getelementptr i8, i8* %ab, i64 %ld
    store i8 %x, i8* %p
    %le = add i64 %ld, 1
    %xca = insertvalue { i64, { i64, i8* } } zeroinitializer, i64 %le, 0
    %xd = insertvalue { i64, i8* } zeroinitializer, i64 %cb, 0
    %xe = insertvalue { i64, i8* } %xd, i8* %ab, 1
    %sa = insertvalue { i64, { i64, i8* } } %xca, { i64, i8* } %xe, 1
    store { i64, { i64, i8* } } %sa, { i64, { i64, i8* } }* %sp
    ret void
}

define { i64, { i64, i8* } } @LLVM_DS_Array_List_arl_resize(i64 %c, { i64, { i64, i8* } } %al) {

  start:
    %l = extractvalue { i64, { i64, i8* } } %al, 0
    %x = extractvalue { i64, { i64, i8* } } %al, 1
    %c1 = extractvalue { i64, i8* } %x, 0
    %a = extractvalue { i64, i8* } %x, 1
    %r = sub i64 0, 1
    %max = lshr i64 %r, 1
    %maxa = udiv i64 %max, 2
    %b = icmp ule i64 %c1, %maxa
    br i1 %b, label %then, label %else

  then:
    %ca = mul i64 %c1, 2
    %cok = icmp sle i64 %c, %ca
    br i1 %cok, label %thena, label %elsea

  thena:
    br label %ctd_ifa

  elsea:
    br label %ctd_ifa

  ctd_ifa:
    %x1 = phi i64 [ %c, %elsea ], [ %ca, %thena ]
    br label %ctd_if

  else:
    br label %ctd_if

  ctd_if:
    %ca1 = phi i64 [ %c, %else ], [ %x1, %ctd_ifa ]
    %tmpa = icmp eq i64 %ca1, 0
    br i1 %tmpa, label %thenb, label %elseb

  thenb:
    br label %ctd_ifb

  elseb:
    %t = getelementptr i8, i8* null, i64 1
    %d = ptrtoint i8* %t to i64
    %e = call i8* @isabelle_llvm_calloc (i64 %ca1, i64 %d)
    %x2 = bitcast i8* %e to i8*
    br label %ctd_ifb

  ctd_ifb:
    %a1 = phi i8* [ %x2, %elseb ], [ null, %thenb ]
    call void @LLVM_DS_Array_arraycpy (i8* %a1, i8* %a, i64 %l)
    call void @LLVM_DS_NArray_narray_free (i8* %a)
    %xaa = insertvalue { i64, { i64, i8* } } zeroinitializer, i64 %l, 0
    %xe = insertvalue { i64, i8* } zeroinitializer, i64 %ca1, 0
    %x3 = insertvalue { i64, i8* } %xe, i8* %a1, 1
    %x4 = insertvalue { i64, { i64, i8* } } %xaa, { i64, i8* } %x3, 1
    ret { i64, { i64, i8* } } %x4
}

define i64* @Proto_IICF_EOArray_swap_eo_impl(i64* %x, i64 %x1, i64 %x2) {

  start:
    %x3 = getelementptr i64, i64* %x, i64 %x1
    %r = load i64, i64* %x3
    %xa = insertvalue { i64, i64* } zeroinitializer, i64 %r, 0
    %xb = insertvalue { i64, i64* } %xa, i64* %x, 1
    %a1 = extractvalue { i64, i64* } %xb, 0
    %a2 = extractvalue { i64, i64* } %xb, 1
    %xc = getelementptr i64, i64* %a2, i64 %x2
    %ra = load i64, i64* %xc
    %xd = insertvalue { i64, i64* } zeroinitializer, i64 %ra, 0
    %xe = insertvalue { i64, i64* } %xd, i64* %a2, 1
    %a1a = extractvalue { i64, i64* } %xe, 0
    %a2a = extractvalue { i64, i64* } %xe, 1
    %p = getelementptr i64, i64* %a2a, i64 %x1
    store i64 %a1a, i64* %p
    %pa = getelementptr i64, i64* %a2a, i64 %x2
    store i64 %a1, i64* %pa
    ret i64* %a2a
}

define { i64, { i64, i8* } }* @Proto_IICF_EOArray_swap_eo_impl1({ i64, { i64, i8* } }* %x, i64 %x1, i64 %x2) {

  start:
    %x3 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %x, i64 %x1
    %r = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %x3
    %xa = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %r, 0
    %xb = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xa, { i64, { i64, i8* } }* %x, 1
    %a1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xb, 0
    %a2 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xb, 1
    %xc = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2, i64 %x2
    %ra = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xc
    %xd = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %ra, 0
    %xe = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xd, { i64, { i64, i8* } }* %a2, 1
    %a1a = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xe, 0
    %a2a = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xe, 1
    %p = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2a, i64 %x1
    store { i64, { i64, i8* } } %a1a, { i64, { i64, i8* } }* %p
    %pa = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2a, i64 %x2
    store { i64, { i64, i8* } } %a1, { i64, { i64, i8* } }* %pa
    ret { i64, { i64, i8* } }* %a2a
}

define { i64, { i64, i8* } }* @Sorting_Introsort_str_sort_heapsort_impl({ i64, { i64, i8* } }* %x, i64 %x1, i64 %x2) {

  start:
    %x3 = sub i64 %x2, %x1
    %xa = icmp slt i64 1, %x3
    br i1 %xa, label %then, label %else

  then:
    %xb = call { i64, { i64, i8* } }* @Sorting_Introsort_str_sort_heapify_btu_impl (i64 %x1, i64 %x2, { i64, { i64, i8* } }* %x)
    %xc = insertvalue { { i64, { i64, i8* } }*, i64 } zeroinitializer, { i64, { i64, i8* } }* %xb, 0
    %xd = insertvalue { { i64, { i64, i8* } }*, i64 } %xc, i64 %x2, 1
    br label %while_start

  while_start:
    %xca = phi { { i64, { i64, i8* } }*, i64 } [ %x5, %while_body ], [ %xd, %then ]
    %a1 = extractvalue { { i64, { i64, i8* } }*, i64 } %xca, 0
    %a2 = extractvalue { { i64, { i64, i8* } }*, i64 } %xca, 1
    %xda = add i64 %x1, 1
    %x4 = icmp slt i64 %xda, %a2
    br i1 %x4, label %while_body, label %while_end

  while_body:
    %a11 = extractvalue { { i64, { i64, i8* } }*, i64 } %xca, 0
    %a21 = extractvalue { { i64, { i64, i8* } }*, i64 } %xca, 1
    %xda1 = sub i64 %a21, 1
    %xea = call { i64, { i64, i8* } }* @Proto_IICF_EOArray_swap_eo_impl1 ({ i64, { i64, i8* } }* %a11, i64 %x1, i64 %xda1)
    %xfa = sub i64 %a21, 1
    %xg = call { i64, { i64, i8* } }* @Sorting_Introsort_str_sort_sift_down_impl (i64 %x1, i64 %xfa, i64 %x1, { i64, { i64, i8* } }* %xea)
    %xha = sub i64 %a21, 1
    %xi = insertvalue { { i64, { i64, i8* } }*, i64 } zeroinitializer, { i64, { i64, i8* } }* %xg, 0
    %x5 = insertvalue { { i64, { i64, i8* } }*, i64 } %xi, i64 %xha, 1
    br label %while_start

  while_end:
    %a12 = extractvalue { { i64, { i64, i8* } }*, i64 } %xca, 0
    %a22 = extractvalue { { i64, { i64, i8* } }*, i64 } %xca, 1
    br label %ctd_if

  else:
    br label %ctd_if

  ctd_if:
    %x6 = phi { i64, { i64, i8* } }* [ %x, %else ], [ %a12, %while_end ]
    ret { i64, { i64, i8* } }* %x6
}

define { i64, { i64, i8* } }* @str_introsort({ i64, { i64, i8* } }* %x, i64 %x1, i64 %x2) {

  start:
    %x3 = sub i64 %x2, %x1
    %xa = icmp slt i64 1, %x3
    br i1 %xa, label %then, label %else

  then:
    %xb = sub i64 %x2, %x1
    %xc = sub i64 64, 1
    %xd = call i64 @Sorting_Log2_word_clz_impl (i64 %xb)
    %xe = sub i64 %xc, %xd
    %xf = mul i64 %xe, 2
    %xg = call { i64, { i64, i8* } }* @Sorting_Introsort_str_sort_introsort_qs_aux_impl ({ i64, { i64, i8* } }* %x, i64 %x1, i64 %x2, i64 %xf)
    %x4 = call { i64, { i64, i8* } }* @Sorting_Introsort_str_sort_insertion_sort_impl ({ i64, { i64, i8* } }* %xg, i64 %x1, i64 %x2)
    br label %ctd_if

  else:
    br label %ctd_if

  ctd_if:
    %x5 = phi { i64, { i64, i8* } }* [ %x, %else ], [ %x4, %then ]
    ret { i64, { i64, i8* } }* %x5
}

define { i64, { i64, i8* } }* @Sorting_Introsort_str_sort_is_insert_impl({ i64, { i64, i8* } }* %x, i64 %x1, i64 %x2) {

  start:
    %x3 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %x, i64 %x2
    %r = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %x3
    %xa = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %r, 0
    %xb = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xa, { i64, { i64, i8* } }* %x, 1
    %a1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xb, 0
    %a2 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xb, 1
    %xc = insertvalue { { i64, { i64, i8* } }*, i64 } zeroinitializer, { i64, { i64, i8* } }* %a2, 0
    %xd = insertvalue { { i64, { i64, i8* } }*, i64 } %xc, i64 %x2, 1
    br label %while_start

  while_start:
    %xca = phi { { i64, { i64, i8* } }*, i64 } [ %x5, %while_body ], [ %xd, %start ]
    %a1a = extractvalue { { i64, { i64, i8* } }*, i64 } %xca, 0
    %a2a = extractvalue { { i64, { i64, i8* } }*, i64 } %xca, 1
    %xda = icmp slt i64 %x1, %a2a
    br i1 %xda, label %then, label %else

  then:
    %bib = sub i64 %a2a, 1
    %xea = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a1a, i64 %bib
    %ra = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xea
    %xf = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %ra, 0
    %xg = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xf, { i64, { i64, i8* } }* %a1a, 1
    %a1b = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xg, 0
    %a2b = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xg, 1
    %xh = call i1 @Sorting_Strings_strcmp_impl ({ i64, { i64, i8* } } %a1, { i64, { i64, i8* } } %a1b)
    %p = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2b, i64 %bib
    store { i64, { i64, i8* } } %a1b, { i64, { i64, i8* } }* %p
    br label %ctd_if

  else:
    br label %ctd_if

  ctd_if:
    %x4 = phi i1 [ 0, %else ], [ %xh, %then ]
    br i1 %x4, label %while_body, label %while_end

  while_body:
    %a1a1 = extractvalue { { i64, { i64, i8* } }*, i64 } %xca, 0
    %a2a1 = extractvalue { { i64, { i64, i8* } }*, i64 } %xca, 1
    %xda1 = sub i64 %a2a1, 1
    %xea1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a1a1, i64 %xda1
    %ra1 = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xea1
    %xf1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %ra1, 0
    %xg1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xf1, { i64, { i64, i8* } }* %a1a1, 1
    %a1b1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xg1, 0
    %a2b1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xg1, 1
    %p1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2b1, i64 %a2a1
    store { i64, { i64, i8* } } %a1b1, { i64, { i64, i8* } }* %p1
    %xia = sub i64 %a2a1, 1
    %xj = insertvalue { { i64, { i64, i8* } }*, i64 } zeroinitializer, { i64, { i64, i8* } }* %a2b1, 0
    %x5 = insertvalue { { i64, { i64, i8* } }*, i64 } %xj, i64 %xia, 1
    br label %while_start

  while_end:
    %a1a2 = extractvalue { { i64, { i64, i8* } }*, i64 } %xca, 0
    %a2a2 = extractvalue { { i64, { i64, i8* } }*, i64 } %xca, 1
    %p2 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a1a2, i64 %a2a2
    store { i64, { i64, i8* } } %a1, { i64, { i64, i8* } }* %p2
    ret { i64, { i64, i8* } }* %a1a2
}

define { i64, { i64, i8* } }* @Sorting_Introsort_str_sort_sift_down_impl(i64 %x, i64 %x1, i64 %x2, { i64, { i64, i8* } }* %x3) {

  start:
    %x4 = sub i64 %x2, %x
    %xa = add i64 %x, %x4
    %xb = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %x3, i64 %xa
    %r = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xb
    %xc = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %r, 0
    %xd = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xc, { i64, { i64, i8* } }* %x3, 1
    %a1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xd, 0
    %a2 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xd, 1
    %xe = insertvalue { i64, i1 } zeroinitializer, i64 %x4, 0
    %tmpb = insertvalue { i64, i1 } %xe, i1 1, 1
    %xf = insertvalue { { i64, { i64, i8* } }*, { i64, i1 } } zeroinitializer, { i64, { i64, i8* } }* %a2, 0
    %xg = insertvalue { { i64, { i64, i8* } }*, { i64, i1 } } %xf, { i64, i1 } %tmpb, 1
    br label %while_start

  while_start:
    %xea = phi { { i64, { i64, i8* } }*, { i64, i1 } } [ %x16, %ctd_if ], [ %xg, %start ]
    %a1a = extractvalue { { i64, { i64, i8* } }*, { i64, i1 } } %xea, 0
    %xfa = extractvalue { { i64, { i64, i8* } }*, { i64, i1 } } %xea, 1
    %a1b = extractvalue { i64, i1 } %xfa, 0
    %a2b = extractvalue { i64, i1 } %xfa, 1
    %xga = sub i64 %x1, %x
    %xha = sub i64 %xga, 1
    %xia = udiv i64 %xha, 2
    %xj = icmp slt i64 %a1b, %xia
    %x5 = and i1 %xj, %a2b
    br i1 %x5, label %while_body, label %while_end

  while_body:
    %a1a1 = extractvalue { { i64, { i64, i8* } }*, { i64, i1 } } %xea, 0
    %xfa1 = extractvalue { { i64, { i64, i8* } }*, { i64, i1 } } %xea, 1
    %a1b1 = extractvalue { i64, i1 } %xfa1, 0
    %a2b1 = extractvalue { i64, i1 } %xfa1, 1
    %xga1 = mul i64 2, %a1b1
    %xha1 = add i64 %xga1, 1
    %xi = mul i64 2, %a1b1
    %xja = add i64 %xi, 2
    %xk = add i64 %x, %xha1
    %xl = add i64 %x, %xja
    %xm = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a1a1, i64 %xk
    %ra = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xm
    %xn = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %ra, 0
    %xo = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xn, { i64, { i64, i8* } }* %a1a1, 1
    %a1c = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xo, 0
    %a2a = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xo, 1
    %xp = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2a, i64 %xl
    %rb = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xp
    %xq = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %rb, 0
    %xr = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xq, { i64, { i64, i8* } }* %a2a, 1
    %a1aa = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xr, 0
    %a2aa = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xr, 1
    %xs = call i1 @Sorting_Strings_strcmp_impl ({ i64, { i64, i8* } } %a1c, { i64, { i64, i8* } } %a1aa)
    %p = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2aa, i64 %xk
    store { i64, { i64, i8* } } %a1c, { i64, { i64, i8* } }* %p
    %pa = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2aa, i64 %xl
    store { i64, { i64, i8* } } %a1aa, { i64, { i64, i8* } }* %pa
    br i1 %xs, label %then, label %else

  then:
    %xw = add i64 %x, %xja
    %xx = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a1a1, i64 %xw
    %rc = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xx
    %xy = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %rc, 0
    %xz = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xy, { i64, { i64, i8* } }* %a1a1, 1
    %a1d = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xz, 0
    %a2c = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xz, 1
    %ya = call i1 @Sorting_Strings_strcmp_impl ({ i64, { i64, i8* } } %a1, { i64, { i64, i8* } } %a1d)
    %pb = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2c, i64 %xw
    store { i64, { i64, i8* } } %a1d, { i64, { i64, i8* } }* %pb
    br i1 %ya, label %thena, label %elsea

  thena:
    %yd = add i64 %x, %xja
    %ye = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a1a1, i64 %yd
    %rd = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %ye
    %yf = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %rd, 0
    %yg = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %yf, { i64, { i64, i8* } }* %a1a1, 1
    %a1ca = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %yg, 0
    %a2ca = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %yg, 1
    %yh = add i64 %x, %a1b1
    %pc = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2ca, i64 %yh
    store { i64, { i64, i8* } } %a1ca, { i64, { i64, i8* } }* %pc
    %yj = insertvalue { { i64, { i64, i8* } }*, { i64, i1 } } zeroinitializer, { i64, { i64, i8* } }* %a2ca, 0
    %yk = insertvalue { i64, i1 } zeroinitializer, i64 %xja, 0
    %x6 = insertvalue { i64, i1 } %yk, i1 1, 1
    %x7 = insertvalue { { i64, { i64, i8* } }*, { i64, i1 } } %yj, { i64, i1 } %x6, 1
    br label %ctd_ifa

  elsea:
    %yd1 = insertvalue { { i64, { i64, i8* } }*, { i64, i1 } } zeroinitializer, { i64, { i64, i8* } }* %a1a1, 0
    %ye1 = insertvalue { i64, i1 } zeroinitializer, i64 %a1b1, 0
    %x8 = insertvalue { i64, i1 } %ye1, i1 0, 1
    %x9 = insertvalue { { i64, { i64, i8* } }*, { i64, i1 } } %yd1, { i64, i1 } %x8, 1
    br label %ctd_ifa

  ctd_ifa:
    %x10 = phi { { i64, { i64, i8* } }*, { i64, i1 } } [ %x9, %elsea ], [ %x7, %thena ]
    br label %ctd_if

  else:
    %xw1 = add i64 %x, %xha1
    %xx1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a1a1, i64 %xw1
    %rc1 = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xx1
    %xy1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %rc1, 0
    %xz1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xy1, { i64, { i64, i8* } }* %a1a1, 1
    %a1d1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xz1, 0
    %a2c1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xz1, 1
    %ya1 = call i1 @Sorting_Strings_strcmp_impl ({ i64, { i64, i8* } } %a1, { i64, { i64, i8* } } %a1d1)
    %pb1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2c1, i64 %xw1
    store { i64, { i64, i8* } } %a1d1, { i64, { i64, i8* } }* %pb1
    br i1 %ya1, label %thenb, label %elseb

  thenb:
    %yd2 = add i64 %x, %xha1
    %ye2 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a1a1, i64 %yd2
    %rd1 = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %ye2
    %yf1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %rd1, 0
    %yg1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %yf1, { i64, { i64, i8* } }* %a1a1, 1
    %a1ca1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %yg1, 0
    %a2ca1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %yg1, 1
    %yh1 = add i64 %x, %a1b1
    %pc1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2ca1, i64 %yh1
    store { i64, { i64, i8* } } %a1ca1, { i64, { i64, i8* } }* %pc1
    %yj1 = insertvalue { { i64, { i64, i8* } }*, { i64, i1 } } zeroinitializer, { i64, { i64, i8* } }* %a2ca1, 0
    %yk1 = insertvalue { i64, i1 } zeroinitializer, i64 %xha1, 0
    %x11 = insertvalue { i64, i1 } %yk1, i1 1, 1
    %x12 = insertvalue { { i64, { i64, i8* } }*, { i64, i1 } } %yj1, { i64, i1 } %x11, 1
    br label %ctd_ifb

  elseb:
    %yd3 = insertvalue { { i64, { i64, i8* } }*, { i64, i1 } } zeroinitializer, { i64, { i64, i8* } }* %a1a1, 0
    %ye3 = insertvalue { i64, i1 } zeroinitializer, i64 %a1b1, 0
    %x13 = insertvalue { i64, i1 } %ye3, i1 0, 1
    %x14 = insertvalue { { i64, { i64, i8* } }*, { i64, i1 } } %yd3, { i64, i1 } %x13, 1
    br label %ctd_ifb

  ctd_ifb:
    %x15 = phi { { i64, { i64, i8* } }*, { i64, i1 } } [ %x14, %elseb ], [ %x12, %thenb ]
    br label %ctd_if

  ctd_if:
    %x16 = phi { { i64, { i64, i8* } }*, { i64, i1 } } [ %x15, %ctd_ifb ], [ %x10, %ctd_ifa ]
    br label %while_start

  while_end:
    %a1a2 = extractvalue { { i64, { i64, i8* } }*, { i64, i1 } } %xea, 0
    %xfa2 = extractvalue { { i64, { i64, i8* } }*, { i64, i1 } } %xea, 1
    %a1b2 = extractvalue { i64, i1 } %xfa2, 0
    %a2b2 = extractvalue { i64, i1 } %xfa2, 1
    %xga2 = sub i64 %x1, %x
    %xha2 = udiv i64 %xga2, 2
    %xi1 = icmp slt i64 %a1b2, %xha2
    br i1 %xi1, label %thenc, label %elsec

  thenc:
    %xj1 = mul i64 2, %a1b2
    %xka = add i64 %xj1, 1
    %xl1 = add i64 %x, %xka
    %xm1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a1a2, i64 %xl1
    %ra1 = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xm1
    %xn1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %ra1, 0
    %xo1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xn1, { i64, { i64, i8* } }* %a1a2, 1
    %a1c1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xo1, 0
    %a2a1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xo1, 1
    %xp1 = call i1 @Sorting_Strings_strcmp_impl ({ i64, { i64, i8* } } %a1, { i64, { i64, i8* } } %a1c1)
    %p1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2a1, i64 %xl1
    store { i64, { i64, i8* } } %a1c1, { i64, { i64, i8* } }* %p1
    br i1 %xp1, label %thend, label %elsed

  thend:
    %xs1 = add i64 %x, %xka
    %xt = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a1a2, i64 %xs1
    %rb1 = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xt
    %xu = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %rb1, 0
    %xv = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xu, { i64, { i64, i8* } }* %a1a2, 1
    %a1ca2 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xv, 0
    %a2c2 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xv, 1
    %xw2 = add i64 %x, %a1b2
    %pa1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2c2, i64 %xw2
    store { i64, { i64, i8* } } %a1ca2, { i64, { i64, i8* } }* %pa1
    %xy2 = add i64 %x, %xka
    %pb2 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2c2, i64 %xy2
    store { i64, { i64, i8* } } %a1, { i64, { i64, i8* } }* %pb2
    br label %ctd_ifd

  elsed:
    %xs2 = add i64 %x, %a1b2
    %pa2 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a1a2, i64 %xs2
    store { i64, { i64, i8* } } %a1, { i64, { i64, i8* } }* %pa2
    br label %ctd_ifd

  ctd_ifd:
    %x17 = phi { i64, { i64, i8* } }* [ %a1a2, %elsed ], [ %a2c2, %thend ]
    br label %ctd_ifc

  elsec:
    %xj2 = add i64 %x, %a1b2
    %p2 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a1a2, i64 %xj2
    store { i64, { i64, i8* } } %a1, { i64, { i64, i8* } }* %p2
    br label %ctd_ifc

  ctd_ifc:
    %x18 = phi { i64, { i64, i8* } }* [ %a1a2, %elsec ], [ %x17, %ctd_ifd ]
    ret { i64, { i64, i8* } }* %x18
}

define i64* @heapsort(i64* %x, i64 %x1, i64 %x2) {

  start:
    %x3 = sub i64 %x2, %x1
    %xa = icmp slt i64 1, %x3
    br i1 %xa, label %then, label %else

  then:
    %xb = call i64* @Sorting_Introsort_unat_sort_heapify_btu_impl (i64 %x1, i64 %x2, i64* %x)
    %xc = insertvalue { i64*, i64 } zeroinitializer, i64* %xb, 0
    %xd = insertvalue { i64*, i64 } %xc, i64 %x2, 1
    br label %while_start

  while_start:
    %xca = phi { i64*, i64 } [ %x5, %while_body ], [ %xd, %then ]
    %a1 = extractvalue { i64*, i64 } %xca, 0
    %a2 = extractvalue { i64*, i64 } %xca, 1
    %xda = add i64 %x1, 1
    %x4 = icmp slt i64 %xda, %a2
    br i1 %x4, label %while_body, label %while_end

  while_body:
    %a11 = extractvalue { i64*, i64 } %xca, 0
    %a21 = extractvalue { i64*, i64 } %xca, 1
    %xda1 = sub i64 %a21, 1
    %xea = call i64* @Proto_IICF_EOArray_swap_eo_impl (i64* %a11, i64 %x1, i64 %xda1)
    %xfa = sub i64 %a21, 1
    %xg = call i64* @Sorting_Introsort_unat_sort_sift_down_impl (i64 %x1, i64 %xfa, i64 %x1, i64* %xea)
    %xha = sub i64 %a21, 1
    %xi = insertvalue { i64*, i64 } zeroinitializer, i64* %xg, 0
    %x5 = insertvalue { i64*, i64 } %xi, i64 %xha, 1
    br label %while_start

  while_end:
    %a12 = extractvalue { i64*, i64 } %xca, 0
    %a22 = extractvalue { i64*, i64 } %xca, 1
    br label %ctd_if

  else:
    br label %ctd_if

  ctd_if:
    %x6 = phi i64* [ %x, %else ], [ %a12, %while_end ]
    ret i64* %x6
}

define i64* @introsort(i64* %x, i64 %x1, i64 %x2) {

  start:
    %x3 = sub i64 %x2, %x1
    %xa = icmp slt i64 1, %x3
    br i1 %xa, label %then, label %else

  then:
    %xb = sub i64 %x2, %x1
    %xc = sub i64 64, 1
    %xd = call i64 @Sorting_Log2_word_clz_impl (i64 %xb)
    %xe = sub i64 %xc, %xd
    %xf = mul i64 %xe, 2
    %xg = call i64* @introsort_aux (i64* %x, i64 %x1, i64 %x2, i64 %xf)
    %x4 = call i64* @insertion_sort (i64* %xg, i64 %x1, i64 %x2)
    br label %ctd_if

  else:
    br label %ctd_if

  ctd_if:
    %x5 = phi i64* [ %x, %else ], [ %x4, %then ]
    ret i64* %x5
}

define i64* @Sorting_Introsort_unat_sort_is_insert_impl(i64* %x, i64 %x1, i64 %x2) {

  start:
    %x3 = getelementptr i64, i64* %x, i64 %x2
    %r = load i64, i64* %x3
    %xa = insertvalue { i64, i64* } zeroinitializer, i64 %r, 0
    %xb = insertvalue { i64, i64* } %xa, i64* %x, 1
    %a1 = extractvalue { i64, i64* } %xb, 0
    %a2 = extractvalue { i64, i64* } %xb, 1
    %xc = insertvalue { i64*, i64 } zeroinitializer, i64* %a2, 0
    %xd = insertvalue { i64*, i64 } %xc, i64 %x2, 1
    br label %while_start

  while_start:
    %xca = phi { i64*, i64 } [ %x5, %while_body ], [ %xd, %start ]
    %a1a = extractvalue { i64*, i64 } %xca, 0
    %a2a = extractvalue { i64*, i64 } %xca, 1
    %xda = icmp slt i64 %x1, %a2a
    br i1 %xda, label %then, label %else

  then:
    %bib = sub i64 %a2a, 1
    %xea = getelementptr i64, i64* %a1a, i64 %bib
    %ra = load i64, i64* %xea
    %xf = insertvalue { i64, i64* } zeroinitializer, i64 %ra, 0
    %xg = insertvalue { i64, i64* } %xf, i64* %a1a, 1
    %a1b = extractvalue { i64, i64* } %xg, 0
    %a2b = extractvalue { i64, i64* } %xg, 1
    %xh = icmp ult i64 %a1, %a1b
    %p = getelementptr i64, i64* %a2b, i64 %bib
    store i64 %a1b, i64* %p
    br label %ctd_if

  else:
    br label %ctd_if

  ctd_if:
    %x4 = phi i1 [ 0, %else ], [ %xh, %then ]
    br i1 %x4, label %while_body, label %while_end

  while_body:
    %a1a1 = extractvalue { i64*, i64 } %xca, 0
    %a2a1 = extractvalue { i64*, i64 } %xca, 1
    %xda1 = sub i64 %a2a1, 1
    %xea1 = getelementptr i64, i64* %a1a1, i64 %xda1
    %ra1 = load i64, i64* %xea1
    %xf1 = insertvalue { i64, i64* } zeroinitializer, i64 %ra1, 0
    %xg1 = insertvalue { i64, i64* } %xf1, i64* %a1a1, 1
    %a1b1 = extractvalue { i64, i64* } %xg1, 0
    %a2b1 = extractvalue { i64, i64* } %xg1, 1
    %p1 = getelementptr i64, i64* %a2b1, i64 %a2a1
    store i64 %a1b1, i64* %p1
    %xia = sub i64 %a2a1, 1
    %xj = insertvalue { i64*, i64 } zeroinitializer, i64* %a2b1, 0
    %x5 = insertvalue { i64*, i64 } %xj, i64 %xia, 1
    br label %while_start

  while_end:
    %a1a2 = extractvalue { i64*, i64 } %xca, 0
    %a2a2 = extractvalue { i64*, i64 } %xca, 1
    %p2 = getelementptr i64, i64* %a1a2, i64 %a2a2
    store i64 %a1, i64* %p2
    ret i64* %a1a2
}

define i64* @Sorting_Introsort_unat_sort_sift_down_impl(i64 %x, i64 %x1, i64 %x2, i64* %x3) {

  start:
    %x4 = sub i64 %x2, %x
    %xa = add i64 %x, %x4
    %xb = getelementptr i64, i64* %x3, i64 %xa
    %r = load i64, i64* %xb
    %xc = insertvalue { i64, i64* } zeroinitializer, i64 %r, 0
    %xd = insertvalue { i64, i64* } %xc, i64* %x3, 1
    %a1 = extractvalue { i64, i64* } %xd, 0
    %a2 = extractvalue { i64, i64* } %xd, 1
    %xe = insertvalue { i64, i1 } zeroinitializer, i64 %x4, 0
    %tmpb = insertvalue { i64, i1 } %xe, i1 1, 1
    %xf = insertvalue { i64*, { i64, i1 } } zeroinitializer, i64* %a2, 0
    %xg = insertvalue { i64*, { i64, i1 } } %xf, { i64, i1 } %tmpb, 1
    br label %while_start

  while_start:
    %xea = phi { i64*, { i64, i1 } } [ %x16, %ctd_if ], [ %xg, %start ]
    %a1a = extractvalue { i64*, { i64, i1 } } %xea, 0
    %xfa = extractvalue { i64*, { i64, i1 } } %xea, 1
    %a1b = extractvalue { i64, i1 } %xfa, 0
    %a2b = extractvalue { i64, i1 } %xfa, 1
    %xga = sub i64 %x1, %x
    %xha = sub i64 %xga, 1
    %xia = udiv i64 %xha, 2
    %xj = icmp slt i64 %a1b, %xia
    %x5 = and i1 %xj, %a2b
    br i1 %x5, label %while_body, label %while_end

  while_body:
    %a1a1 = extractvalue { i64*, { i64, i1 } } %xea, 0
    %xfa1 = extractvalue { i64*, { i64, i1 } } %xea, 1
    %a1b1 = extractvalue { i64, i1 } %xfa1, 0
    %a2b1 = extractvalue { i64, i1 } %xfa1, 1
    %xga1 = mul i64 2, %a1b1
    %xha1 = add i64 %xga1, 1
    %xi = mul i64 2, %a1b1
    %xja = add i64 %xi, 2
    %xk = add i64 %x, %xha1
    %xl = add i64 %x, %xja
    %xm = getelementptr i64, i64* %a1a1, i64 %xk
    %ra = load i64, i64* %xm
    %xn = insertvalue { i64, i64* } zeroinitializer, i64 %ra, 0
    %xo = insertvalue { i64, i64* } %xn, i64* %a1a1, 1
    %a1c = extractvalue { i64, i64* } %xo, 0
    %a2a = extractvalue { i64, i64* } %xo, 1
    %xp = getelementptr i64, i64* %a2a, i64 %xl
    %rb = load i64, i64* %xp
    %xq = insertvalue { i64, i64* } zeroinitializer, i64 %rb, 0
    %xr = insertvalue { i64, i64* } %xq, i64* %a2a, 1
    %a1aa = extractvalue { i64, i64* } %xr, 0
    %a2aa = extractvalue { i64, i64* } %xr, 1
    %xs = icmp ult i64 %a1c, %a1aa
    %p = getelementptr i64, i64* %a2aa, i64 %xk
    store i64 %a1c, i64* %p
    %pa = getelementptr i64, i64* %a2aa, i64 %xl
    store i64 %a1aa, i64* %pa
    br i1 %xs, label %then, label %else

  then:
    %xw = add i64 %x, %xja
    %xx = getelementptr i64, i64* %a1a1, i64 %xw
    %rc = load i64, i64* %xx
    %xy = insertvalue { i64, i64* } zeroinitializer, i64 %rc, 0
    %xz = insertvalue { i64, i64* } %xy, i64* %a1a1, 1
    %a1d = extractvalue { i64, i64* } %xz, 0
    %a2c = extractvalue { i64, i64* } %xz, 1
    %ya = icmp ult i64 %a1, %a1d
    %pb = getelementptr i64, i64* %a2c, i64 %xw
    store i64 %a1d, i64* %pb
    br i1 %ya, label %thena, label %elsea

  thena:
    %yd = add i64 %x, %xja
    %ye = getelementptr i64, i64* %a1a1, i64 %yd
    %rd = load i64, i64* %ye
    %yf = insertvalue { i64, i64* } zeroinitializer, i64 %rd, 0
    %yg = insertvalue { i64, i64* } %yf, i64* %a1a1, 1
    %a1ca = extractvalue { i64, i64* } %yg, 0
    %a2ca = extractvalue { i64, i64* } %yg, 1
    %yh = add i64 %x, %a1b1
    %pc = getelementptr i64, i64* %a2ca, i64 %yh
    store i64 %a1ca, i64* %pc
    %yj = insertvalue { i64*, { i64, i1 } } zeroinitializer, i64* %a2ca, 0
    %yk = insertvalue { i64, i1 } zeroinitializer, i64 %xja, 0
    %x6 = insertvalue { i64, i1 } %yk, i1 1, 1
    %x7 = insertvalue { i64*, { i64, i1 } } %yj, { i64, i1 } %x6, 1
    br label %ctd_ifa

  elsea:
    %yd1 = insertvalue { i64*, { i64, i1 } } zeroinitializer, i64* %a1a1, 0
    %ye1 = insertvalue { i64, i1 } zeroinitializer, i64 %a1b1, 0
    %x8 = insertvalue { i64, i1 } %ye1, i1 0, 1
    %x9 = insertvalue { i64*, { i64, i1 } } %yd1, { i64, i1 } %x8, 1
    br label %ctd_ifa

  ctd_ifa:
    %x10 = phi { i64*, { i64, i1 } } [ %x9, %elsea ], [ %x7, %thena ]
    br label %ctd_if

  else:
    %xw1 = add i64 %x, %xha1
    %xx1 = getelementptr i64, i64* %a1a1, i64 %xw1
    %rc1 = load i64, i64* %xx1
    %xy1 = insertvalue { i64, i64* } zeroinitializer, i64 %rc1, 0
    %xz1 = insertvalue { i64, i64* } %xy1, i64* %a1a1, 1
    %a1d1 = extractvalue { i64, i64* } %xz1, 0
    %a2c1 = extractvalue { i64, i64* } %xz1, 1
    %ya1 = icmp ult i64 %a1, %a1d1
    %pb1 = getelementptr i64, i64* %a2c1, i64 %xw1
    store i64 %a1d1, i64* %pb1
    br i1 %ya1, label %thenb, label %elseb

  thenb:
    %yd2 = add i64 %x, %xha1
    %ye2 = getelementptr i64, i64* %a1a1, i64 %yd2
    %rd1 = load i64, i64* %ye2
    %yf1 = insertvalue { i64, i64* } zeroinitializer, i64 %rd1, 0
    %yg1 = insertvalue { i64, i64* } %yf1, i64* %a1a1, 1
    %a1ca1 = extractvalue { i64, i64* } %yg1, 0
    %a2ca1 = extractvalue { i64, i64* } %yg1, 1
    %yh1 = add i64 %x, %a1b1
    %pc1 = getelementptr i64, i64* %a2ca1, i64 %yh1
    store i64 %a1ca1, i64* %pc1
    %yj1 = insertvalue { i64*, { i64, i1 } } zeroinitializer, i64* %a2ca1, 0
    %yk1 = insertvalue { i64, i1 } zeroinitializer, i64 %xha1, 0
    %x11 = insertvalue { i64, i1 } %yk1, i1 1, 1
    %x12 = insertvalue { i64*, { i64, i1 } } %yj1, { i64, i1 } %x11, 1
    br label %ctd_ifb

  elseb:
    %yd3 = insertvalue { i64*, { i64, i1 } } zeroinitializer, i64* %a1a1, 0
    %ye3 = insertvalue { i64, i1 } zeroinitializer, i64 %a1b1, 0
    %x13 = insertvalue { i64, i1 } %ye3, i1 0, 1
    %x14 = insertvalue { i64*, { i64, i1 } } %yd3, { i64, i1 } %x13, 1
    br label %ctd_ifb

  ctd_ifb:
    %x15 = phi { i64*, { i64, i1 } } [ %x14, %elseb ], [ %x12, %thenb ]
    br label %ctd_if

  ctd_if:
    %x16 = phi { i64*, { i64, i1 } } [ %x15, %ctd_ifb ], [ %x10, %ctd_ifa ]
    br label %while_start

  while_end:
    %a1a2 = extractvalue { i64*, { i64, i1 } } %xea, 0
    %xfa2 = extractvalue { i64*, { i64, i1 } } %xea, 1
    %a1b2 = extractvalue { i64, i1 } %xfa2, 0
    %a2b2 = extractvalue { i64, i1 } %xfa2, 1
    %xga2 = sub i64 %x1, %x
    %xha2 = udiv i64 %xga2, 2
    %xi1 = icmp slt i64 %a1b2, %xha2
    br i1 %xi1, label %thenc, label %elsec

  thenc:
    %xj1 = mul i64 2, %a1b2
    %xka = add i64 %xj1, 1
    %xl1 = add i64 %x, %xka
    %xm1 = getelementptr i64, i64* %a1a2, i64 %xl1
    %ra1 = load i64, i64* %xm1
    %xn1 = insertvalue { i64, i64* } zeroinitializer, i64 %ra1, 0
    %xo1 = insertvalue { i64, i64* } %xn1, i64* %a1a2, 1
    %a1c1 = extractvalue { i64, i64* } %xo1, 0
    %a2a1 = extractvalue { i64, i64* } %xo1, 1
    %xp1 = icmp ult i64 %a1, %a1c1
    %p1 = getelementptr i64, i64* %a2a1, i64 %xl1
    store i64 %a1c1, i64* %p1
    br i1 %xp1, label %thend, label %elsed

  thend:
    %xs1 = add i64 %x, %xka
    %xt = getelementptr i64, i64* %a1a2, i64 %xs1
    %rb1 = load i64, i64* %xt
    %xu = insertvalue { i64, i64* } zeroinitializer, i64 %rb1, 0
    %xv = insertvalue { i64, i64* } %xu, i64* %a1a2, 1
    %a1ca2 = extractvalue { i64, i64* } %xv, 0
    %a2c2 = extractvalue { i64, i64* } %xv, 1
    %xw2 = add i64 %x, %a1b2
    %pa1 = getelementptr i64, i64* %a2c2, i64 %xw2
    store i64 %a1ca2, i64* %pa1
    %xy2 = add i64 %x, %xka
    %pb2 = getelementptr i64, i64* %a2c2, i64 %xy2
    store i64 %a1, i64* %pb2
    br label %ctd_ifd

  elsed:
    %xs2 = add i64 %x, %a1b2
    %pa2 = getelementptr i64, i64* %a1a2, i64 %xs2
    store i64 %a1, i64* %pa2
    br label %ctd_ifd

  ctd_ifd:
    %x17 = phi i64* [ %a1a2, %elsed ], [ %a2c2, %thend ]
    br label %ctd_ifc

  elsec:
    %xj2 = add i64 %x, %a1b2
    %p2 = getelementptr i64, i64* %a1a2, i64 %xj2
    store i64 %a1, i64* %p2
    br label %ctd_ifc

  ctd_ifc:
    %x18 = phi i64* [ %a1a2, %elsec ], [ %x17, %ctd_ifd ]
    ret i64* %x18
}

define { i64, { i64, i8* } }* @Sorting_Introsort_str_sort_heapify_btu_impl(i64 %x, i64 %x1, { i64, { i64, i8* } }* %x2) {

  start:
    %xa = sub i64 %x1, 1
    %xb = insertvalue { { i64, { i64, i8* } }*, i64 } zeroinitializer, { i64, { i64, i8* } }* %x2, 0
    %xc = insertvalue { { i64, { i64, i8* } }*, i64 } %xb, i64 %xa, 1
    br label %while_start

  while_start:
    %xaa = phi { { i64, { i64, i8* } }*, i64 } [ %x5, %while_body ], [ %xc, %start ]
    %a1 = extractvalue { { i64, { i64, i8* } }*, i64 } %xaa, 0
    %x3 = extractvalue { { i64, { i64, i8* } }*, i64 } %xaa, 1
    %x4 = icmp slt i64 %x, %x3
    br i1 %x4, label %while_body, label %while_end

  while_body:
    %a11 = extractvalue { { i64, { i64, i8* } }*, i64 } %xaa, 0
    %a2 = extractvalue { { i64, { i64, i8* } }*, i64 } %xaa, 1
    %xba = sub i64 %a2, 1
    %xca = call { i64, { i64, i8* } }* @Sorting_Introsort_str_sort_sift_down_impl (i64 %x, i64 %x1, i64 %xba, { i64, { i64, i8* } }* %a11)
    %xda = insertvalue { { i64, { i64, i8* } }*, i64 } zeroinitializer, { i64, { i64, i8* } }* %xca, 0
    %x5 = insertvalue { { i64, { i64, i8* } }*, i64 } %xda, i64 %xba, 1
    br label %while_start

  while_end:
    %a12 = extractvalue { { i64, { i64, i8* } }*, i64 } %xaa, 0
    %a21 = extractvalue { { i64, { i64, i8* } }*, i64 } %xaa, 1
    ret { i64, { i64, i8* } }* %a12
}

define { { i64, { i64, i8* } }*, i64 } @Sorting_Introsort_str_sort_qs_partition_impl(i64 %x, i64 %x1, i64 %x2, { i64, { i64, i8* } }* %x3) {

  start:
    br label %while_start

  while_start:
    %s = phi i64 [ %x5, %while_body ], [ %x, %start ]
    %x4 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %x3, i64 %s
    %r = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %x4
    %xa = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %r, 0
    %xb = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xa, { i64, { i64, i8* } }* %x3, 1
    %a1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xb, 0
    %a2 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xb, 1
    %xc = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2, i64 %x2
    %ra = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xc
    %xd = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %ra, 0
    %xe = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xd, { i64, { i64, i8* } }* %a2, 1
    %a1a = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xe, 0
    %a2a = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xe, 1
    %xf = call i1 @Sorting_Strings_strcmp_impl ({ i64, { i64, i8* } } %a1, { i64, { i64, i8* } } %a1a)
    %p = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2a, i64 %s
    store { i64, { i64, i8* } } %a1, { i64, { i64, i8* } }* %p
    %pa = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2a, i64 %x2
    store { i64, { i64, i8* } } %a1a, { i64, { i64, i8* } }* %pa
    br i1 %xf, label %while_body, label %while_end

  while_body:
    %x5 = add i64 %s, 1
    br label %while_start

  while_end:
    %xaa = sub i64 %x1, 1
    br label %while_starta

  while_starta:
    %s1 = phi i64 [ %x7, %while_bodya ], [ %xaa, %while_end ]
    %xb1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %x3, i64 %x2
    %r1 = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xb1
    %xc1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %r1, 0
    %xd1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xc1, { i64, { i64, i8* } }* %x3, 1
    %a11 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xd1, 0
    %a21 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xd1, 1
    %xe1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a21, i64 %s1
    %ra1 = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xe1
    %xf1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %ra1, 0
    %xg = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xf1, { i64, { i64, i8* } }* %a21, 1
    %a1a1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xg, 0
    %a2a1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xg, 1
    %xh = call i1 @Sorting_Strings_strcmp_impl ({ i64, { i64, i8* } } %a11, { i64, { i64, i8* } } %a1a1)
    %p1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2a1, i64 %x2
    store { i64, { i64, i8* } } %a11, { i64, { i64, i8* } }* %p1
    %pa1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2a1, i64 %s1
    store { i64, { i64, i8* } } %a1a1, { i64, { i64, i8* } }* %pa1
    br i1 %xh, label %while_bodya, label %while_enda

  while_bodya:
    %x7 = sub i64 %s1, 1
    br label %while_starta

  while_enda:
    %xc2 = insertvalue { i64, i64 } zeroinitializer, i64 %s, 0
    %tmpa = insertvalue { i64, i64 } %xc2, i64 %s1, 1
    %xd2 = insertvalue { { i64, { i64, i8* } }*, { i64, i64 } } zeroinitializer, { i64, { i64, i8* } }* %x3, 0
    %xe2 = insertvalue { { i64, { i64, i8* } }*, { i64, i64 } } %xd2, { i64, i64 } %tmpa, 1
    br label %while_startb

  while_startb:
    %xca = phi { { i64, { i64, i8* } }*, { i64, i64 } } [ %x13, %while_endd ], [ %xe2, %while_enda ]
    %a12 = extractvalue { { i64, { i64, i8* } }*, { i64, i64 } } %xca, 0
    %xda = extractvalue { { i64, { i64, i8* } }*, { i64, i64 } } %xca, 1
    %a = extractvalue { i64, i64 } %xda, 0
    %x8 = extractvalue { i64, i64 } %xda, 1
    %x9 = icmp slt i64 %a, %x8
    br i1 %x9, label %while_bodyb, label %while_endb

  while_bodyb:
    %a13 = extractvalue { { i64, { i64, i8* } }*, { i64, i64 } } %xca, 0
    %xda1 = extractvalue { { i64, { i64, i8* } }*, { i64, i64 } } %xca, 1
    %a1a2 = extractvalue { i64, i64 } %xda1, 0
    %a2a2 = extractvalue { i64, i64 } %xda1, 1
    %xea = call { i64, { i64, i8* } }* @Proto_IICF_EOArray_swap_eo_impl1 ({ i64, { i64, i8* } }* %a13, i64 %a1a2, i64 %a2a2)
    %xfa = add i64 %a1a2, 1
    br label %while_startc

  while_startc:
    %s2 = phi i64 [ %x10, %while_bodyc ], [ %xfa, %while_bodyb ]
    %xg1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xea, i64 %s2
    %r2 = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xg1
    %xh1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %r2, 0
    %xi = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xh1, { i64, { i64, i8* } }* %xea, 1
    %a1b = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xi, 0
    %a22 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xi, 1
    %xj = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a22, i64 %x2
    %ra2 = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xj
    %xk = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %ra2, 0
    %xl = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xk, { i64, { i64, i8* } }* %a22, 1
    %a1aa = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xl, 0
    %a2aa = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xl, 1
    %xm = call i1 @Sorting_Strings_strcmp_impl ({ i64, { i64, i8* } } %a1b, { i64, { i64, i8* } } %a1aa)
    %p2 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2aa, i64 %s2
    store { i64, { i64, i8* } } %a1b, { i64, { i64, i8* } }* %p2
    %pa2 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2aa, i64 %x2
    store { i64, { i64, i8* } } %a1aa, { i64, { i64, i8* } }* %pa2
    br i1 %xm, label %while_bodyc, label %while_endc

  while_bodyc:
    %x10 = add i64 %s2, 1
    br label %while_startc

  while_endc:
    %xha = sub i64 %a2a2, 1
    br label %while_startd

  while_startd:
    %s3 = phi i64 [ %x11, %while_bodyd ], [ %xha, %while_endc ]
    %xi1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xea, i64 %x2
    %r3 = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xi1
    %xj1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %r3, 0
    %xk1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xj1, { i64, { i64, i8* } }* %xea, 1
    %a1b1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xk1, 0
    %a23 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xk1, 1
    %xl1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a23, i64 %s3
    %ra3 = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xl1
    %xm1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %ra3, 0
    %xn = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xm1, { i64, { i64, i8* } }* %a23, 1
    %a1aa1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xn, 0
    %a2aa1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xn, 1
    %xo = call i1 @Sorting_Strings_strcmp_impl ({ i64, { i64, i8* } } %a1b1, { i64, { i64, i8* } } %a1aa1)
    %p3 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2aa1, i64 %x2
    store { i64, { i64, i8* } } %a1b1, { i64, { i64, i8* } }* %p3
    %pa3 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2aa1, i64 %s3
    store { i64, { i64, i8* } } %a1aa1, { i64, { i64, i8* } }* %pa3
    br i1 %xo, label %while_bodyd, label %while_endd

  while_bodyd:
    %x11 = sub i64 %s3, 1
    br label %while_startd

  while_endd:
    %xj2 = insertvalue { { i64, { i64, i8* } }*, { i64, i64 } } zeroinitializer, { i64, { i64, i8* } }* %xea, 0
    %xk2 = insertvalue { i64, i64 } zeroinitializer, i64 %s2, 0
    %x12 = insertvalue { i64, i64 } %xk2, i64 %s3, 1
    %x13 = insertvalue { { i64, { i64, i8* } }*, { i64, i64 } } %xj2, { i64, i64 } %x12, 1
    br label %while_startb

  while_endb:
    %a14 = extractvalue { { i64, { i64, i8* } }*, { i64, i64 } } %xca, 0
    %xda2 = extractvalue { { i64, { i64, i8* } }*, { i64, i64 } } %xca, 1
    %a1a3 = extractvalue { i64, i64 } %xda2, 0
    %a2a3 = extractvalue { i64, i64 } %xda2, 1
    %xea1 = insertvalue { { i64, { i64, i8* } }*, i64 } zeroinitializer, { i64, { i64, i8* } }* %a14, 0
    %x14 = insertvalue { { i64, { i64, i8* } }*, i64 } %xea1, i64 %a1a3, 1
    ret { { i64, { i64, i8* } }*, i64 } %x14
}

define i64* @Sorting_Introsort_unat_sort_heapify_btu_impl(i64 %x, i64 %x1, i64* %x2) {

  start:
    %xa = sub i64 %x1, 1
    %xb = insertvalue { i64*, i64 } zeroinitializer, i64* %x2, 0
    %xc = insertvalue { i64*, i64 } %xb, i64 %xa, 1
    br label %while_start

  while_start:
    %xaa = phi { i64*, i64 } [ %x5, %while_body ], [ %xc, %start ]
    %a1 = extractvalue { i64*, i64 } %xaa, 0
    %x3 = extractvalue { i64*, i64 } %xaa, 1
    %x4 = icmp slt i64 %x, %x3
    br i1 %x4, label %while_body, label %while_end

  while_body:
    %a11 = extractvalue { i64*, i64 } %xaa, 0
    %a2 = extractvalue { i64*, i64 } %xaa, 1
    %xba = sub i64 %a2, 1
    %xca = call i64* @Sorting_Introsort_unat_sort_sift_down_impl (i64 %x, i64 %x1, i64 %xba, i64* %a11)
    %xda = insertvalue { i64*, i64 } zeroinitializer, i64* %xca, 0
    %x5 = insertvalue { i64*, i64 } %xda, i64 %xba, 1
    br label %while_start

  while_end:
    %a12 = extractvalue { i64*, i64 } %xaa, 0
    %a21 = extractvalue { i64*, i64 } %xaa, 1
    ret i64* %a12
}

define { i64*, i64 } @Sorting_Introsort_unat_sort_qs_partition_impl(i64 %x, i64 %x1, i64 %x2, i64* %x3) {

  start:
    br label %while_start

  while_start:
    %s = phi i64 [ %x5, %while_body ], [ %x, %start ]
    %x4 = getelementptr i64, i64* %x3, i64 %s
    %r = load i64, i64* %x4
    %xa = insertvalue { i64, i64* } zeroinitializer, i64 %r, 0
    %xb = insertvalue { i64, i64* } %xa, i64* %x3, 1
    %a1 = extractvalue { i64, i64* } %xb, 0
    %a2 = extractvalue { i64, i64* } %xb, 1
    %xc = getelementptr i64, i64* %a2, i64 %x2
    %ra = load i64, i64* %xc
    %xd = insertvalue { i64, i64* } zeroinitializer, i64 %ra, 0
    %xe = insertvalue { i64, i64* } %xd, i64* %a2, 1
    %a1a = extractvalue { i64, i64* } %xe, 0
    %a2a = extractvalue { i64, i64* } %xe, 1
    %xf = icmp ult i64 %a1, %a1a
    %p = getelementptr i64, i64* %a2a, i64 %s
    store i64 %a1, i64* %p
    %pa = getelementptr i64, i64* %a2a, i64 %x2
    store i64 %a1a, i64* %pa
    br i1 %xf, label %while_body, label %while_end

  while_body:
    %x5 = add i64 %s, 1
    br label %while_start

  while_end:
    %xaa = sub i64 %x1, 1
    br label %while_starta

  while_starta:
    %s1 = phi i64 [ %x7, %while_bodya ], [ %xaa, %while_end ]
    %xb1 = getelementptr i64, i64* %x3, i64 %x2
    %r1 = load i64, i64* %xb1
    %xc1 = insertvalue { i64, i64* } zeroinitializer, i64 %r1, 0
    %xd1 = insertvalue { i64, i64* } %xc1, i64* %x3, 1
    %a11 = extractvalue { i64, i64* } %xd1, 0
    %a21 = extractvalue { i64, i64* } %xd1, 1
    %xe1 = getelementptr i64, i64* %a21, i64 %s1
    %ra1 = load i64, i64* %xe1
    %xf1 = insertvalue { i64, i64* } zeroinitializer, i64 %ra1, 0
    %xg = insertvalue { i64, i64* } %xf1, i64* %a21, 1
    %a1a1 = extractvalue { i64, i64* } %xg, 0
    %a2a1 = extractvalue { i64, i64* } %xg, 1
    %xh = icmp ult i64 %a11, %a1a1
    %p1 = getelementptr i64, i64* %a2a1, i64 %x2
    store i64 %a11, i64* %p1
    %pa1 = getelementptr i64, i64* %a2a1, i64 %s1
    store i64 %a1a1, i64* %pa1
    br i1 %xh, label %while_bodya, label %while_enda

  while_bodya:
    %x7 = sub i64 %s1, 1
    br label %while_starta

  while_enda:
    %xc2 = insertvalue { i64, i64 } zeroinitializer, i64 %s, 0
    %tmpa = insertvalue { i64, i64 } %xc2, i64 %s1, 1
    %xd2 = insertvalue { i64*, { i64, i64 } } zeroinitializer, i64* %x3, 0
    %xe2 = insertvalue { i64*, { i64, i64 } } %xd2, { i64, i64 } %tmpa, 1
    br label %while_startb

  while_startb:
    %xca = phi { i64*, { i64, i64 } } [ %x13, %while_endd ], [ %xe2, %while_enda ]
    %a12 = extractvalue { i64*, { i64, i64 } } %xca, 0
    %xda = extractvalue { i64*, { i64, i64 } } %xca, 1
    %a = extractvalue { i64, i64 } %xda, 0
    %x8 = extractvalue { i64, i64 } %xda, 1
    %x9 = icmp slt i64 %a, %x8
    br i1 %x9, label %while_bodyb, label %while_endb

  while_bodyb:
    %a13 = extractvalue { i64*, { i64, i64 } } %xca, 0
    %xda1 = extractvalue { i64*, { i64, i64 } } %xca, 1
    %a1a2 = extractvalue { i64, i64 } %xda1, 0
    %a2a2 = extractvalue { i64, i64 } %xda1, 1
    %xea = call i64* @Proto_IICF_EOArray_swap_eo_impl (i64* %a13, i64 %a1a2, i64 %a2a2)
    %xfa = add i64 %a1a2, 1
    br label %while_startc

  while_startc:
    %s2 = phi i64 [ %x10, %while_bodyc ], [ %xfa, %while_bodyb ]
    %xg1 = getelementptr i64, i64* %xea, i64 %s2
    %r2 = load i64, i64* %xg1
    %xh1 = insertvalue { i64, i64* } zeroinitializer, i64 %r2, 0
    %xi = insertvalue { i64, i64* } %xh1, i64* %xea, 1
    %a1b = extractvalue { i64, i64* } %xi, 0
    %a22 = extractvalue { i64, i64* } %xi, 1
    %xj = getelementptr i64, i64* %a22, i64 %x2
    %ra2 = load i64, i64* %xj
    %xk = insertvalue { i64, i64* } zeroinitializer, i64 %ra2, 0
    %xl = insertvalue { i64, i64* } %xk, i64* %a22, 1
    %a1aa = extractvalue { i64, i64* } %xl, 0
    %a2aa = extractvalue { i64, i64* } %xl, 1
    %xm = icmp ult i64 %a1b, %a1aa
    %p2 = getelementptr i64, i64* %a2aa, i64 %s2
    store i64 %a1b, i64* %p2
    %pa2 = getelementptr i64, i64* %a2aa, i64 %x2
    store i64 %a1aa, i64* %pa2
    br i1 %xm, label %while_bodyc, label %while_endc

  while_bodyc:
    %x10 = add i64 %s2, 1
    br label %while_startc

  while_endc:
    %xha = sub i64 %a2a2, 1
    br label %while_startd

  while_startd:
    %s3 = phi i64 [ %x11, %while_bodyd ], [ %xha, %while_endc ]
    %xi1 = getelementptr i64, i64* %xea, i64 %x2
    %r3 = load i64, i64* %xi1
    %xj1 = insertvalue { i64, i64* } zeroinitializer, i64 %r3, 0
    %xk1 = insertvalue { i64, i64* } %xj1, i64* %xea, 1
    %a1b1 = extractvalue { i64, i64* } %xk1, 0
    %a23 = extractvalue { i64, i64* } %xk1, 1
    %xl1 = getelementptr i64, i64* %a23, i64 %s3
    %ra3 = load i64, i64* %xl1
    %xm1 = insertvalue { i64, i64* } zeroinitializer, i64 %ra3, 0
    %xn = insertvalue { i64, i64* } %xm1, i64* %a23, 1
    %a1aa1 = extractvalue { i64, i64* } %xn, 0
    %a2aa1 = extractvalue { i64, i64* } %xn, 1
    %xo = icmp ult i64 %a1b1, %a1aa1
    %p3 = getelementptr i64, i64* %a2aa1, i64 %x2
    store i64 %a1b1, i64* %p3
    %pa3 = getelementptr i64, i64* %a2aa1, i64 %s3
    store i64 %a1aa1, i64* %pa3
    br i1 %xo, label %while_bodyd, label %while_endd

  while_bodyd:
    %x11 = sub i64 %s3, 1
    br label %while_startd

  while_endd:
    %xj2 = insertvalue { i64*, { i64, i64 } } zeroinitializer, i64* %xea, 0
    %xk2 = insertvalue { i64, i64 } zeroinitializer, i64 %s2, 0
    %x12 = insertvalue { i64, i64 } %xk2, i64 %s3, 1
    %x13 = insertvalue { i64*, { i64, i64 } } %xj2, { i64, i64 } %x12, 1
    br label %while_startb

  while_endb:
    %a14 = extractvalue { i64*, { i64, i64 } } %xca, 0
    %xda2 = extractvalue { i64*, { i64, i64 } } %xca, 1
    %a1a3 = extractvalue { i64, i64 } %xda2, 0
    %a2a3 = extractvalue { i64, i64 } %xda2, 1
    %xea1 = insertvalue { i64*, i64 } zeroinitializer, i64* %a14, 0
    %x14 = insertvalue { i64*, i64 } %xea1, i64 %a1a3, 1
    ret { i64*, i64 } %x14
}

define { i64, { i64, i8* } }* @Sorting_Introsort_str_sort_insertion_sort_impl({ i64, { i64, i8* } }* %x, i64 %x1, i64 %x2) {

  start:
    %x3 = insertvalue { { i64, { i64, i8* } }*, i64 } zeroinitializer, { i64, { i64, i8* } }* %x, 0
    %xa = insertvalue { { i64, { i64, i8* } }*, i64 } %x3, i64 %x1, 1
    br label %while_start

  while_start:
    %xb = phi { { i64, { i64, i8* } }*, i64 } [ %x5, %while_body ], [ %xa, %start ]
    %a1 = extractvalue { { i64, { i64, i8* } }*, i64 } %xb, 0
    %a2 = extractvalue { { i64, { i64, i8* } }*, i64 } %xb, 1
    %x4 = icmp slt i64 %a2, %x2
    br i1 %x4, label %while_body, label %while_end

  while_body:
    %a11 = extractvalue { { i64, { i64, i8* } }*, i64 } %xb, 0
    %a21 = extractvalue { { i64, { i64, i8* } }*, i64 } %xb, 1
    %xaa = call { i64, { i64, i8* } }* @Sorting_Introsort_str_sort_is_insert_impl ({ i64, { i64, i8* } }* %a11, i64 %x1, i64 %a21)
    %xba = add i64 %a21, 1
    %xca = insertvalue { { i64, { i64, i8* } }*, i64 } zeroinitializer, { i64, { i64, i8* } }* %xaa, 0
    %x5 = insertvalue { { i64, { i64, i8* } }*, i64 } %xca, i64 %xba, 1
    br label %while_start

  while_end:
    %a12 = extractvalue { { i64, { i64, i8* } }*, i64 } %xb, 0
    %a22 = extractvalue { { i64, { i64, i8* } }*, i64 } %xb, 1
    ret { i64, { i64, i8* } }* %a12
}

define i64* @insertion_sort(i64* %x, i64 %x1, i64 %x2) {

  start:
    %x3 = insertvalue { i64*, i64 } zeroinitializer, i64* %x, 0
    %xa = insertvalue { i64*, i64 } %x3, i64 %x1, 1
    br label %while_start

  while_start:
    %xb = phi { i64*, i64 } [ %x5, %while_body ], [ %xa, %start ]
    %a1 = extractvalue { i64*, i64 } %xb, 0
    %a2 = extractvalue { i64*, i64 } %xb, 1
    %x4 = icmp slt i64 %a2, %x2
    br i1 %x4, label %while_body, label %while_end

  while_body:
    %a11 = extractvalue { i64*, i64 } %xb, 0
    %a21 = extractvalue { i64*, i64 } %xb, 1
    %xaa = call i64* @Sorting_Introsort_unat_sort_is_insert_impl (i64* %a11, i64 %x1, i64 %a21)
    %xba = add i64 %a21, 1
    %xca = insertvalue { i64*, i64 } zeroinitializer, i64* %xaa, 0
    %x5 = insertvalue { i64*, i64 } %xca, i64 %xba, 1
    br label %while_start

  while_end:
    %a12 = extractvalue { i64*, i64 } %xb, 0
    %a22 = extractvalue { i64*, i64 } %xb, 1
    ret i64* %a12
}

define { i64, { i64, i8* } }* @Sorting_Introsort_str_sort_introsort_qs_aux_impl({ i64, { i64, i8* } }* %x, i64 %x1, i64 %x2, i64 %x3) {

  start:
    %x4 = insertvalue { i64, i64 } zeroinitializer, i64 %x2, 0
    %tmpa = insertvalue { i64, i64 } %x4, i64 %x3, 1
    %xa = insertvalue { i64, { i64, i64 } } zeroinitializer, i64 %x1, 0
    %tmpab = insertvalue { i64, { i64, i64 } } %xa, { i64, i64 } %tmpa, 1
    %xb = insertvalue { { i64, { i64, i8* } }*, { i64, { i64, i64 } } } zeroinitializer, { i64, { i64, i8* } }* %x, 0
    %x5 = insertvalue { { i64, { i64, i8* } }*, { i64, { i64, i64 } } } %xb, { i64, { i64, i64 } } %tmpab, 1
    %x6 = call { i64, { i64, i8* } }* @Sorting_Introsort_str_sort_introsort_qs_aux_impl_f_04889284 ({ { i64, { i64, i8* } }*, { i64, { i64, i64 } } } %x5)
    ret { i64, { i64, i8* } }* %x6
}

define { i64*, i64 } @Sorting_Introsort_unat_sort_qs_partitionXXX_impl(i64 %x, i64 %x1, i64 %x2, i64* %x3) {

  start:
    %x4 = insertvalue { i64, i1 } zeroinitializer, i64 %x1, 0
    %tmpaa = insertvalue { i64, i1 } %x4, i1 0, 1
    %xa = insertvalue { i64, { i64, i1 } } zeroinitializer, i64 %x, 0
    %tmpba = insertvalue { i64, { i64, i1 } } %xa, { i64, i1 } %tmpaa, 1
    %xb = insertvalue { i64*, { i64, { i64, i1 } } } zeroinitializer, i64* %x3, 0
    %xc = insertvalue { i64*, { i64, { i64, i1 } } } %xb, { i64, { i64, i1 } } %tmpba, 1
    br label %while_start

  while_start:
    %xd = phi { i64*, { i64, { i64, i1 } } } [ %x12, %ctd_if ], [ %xc, %start ]
    %a1 = extractvalue { i64*, { i64, { i64, i1 } } } %xd, 0
    %xaa = extractvalue { i64*, { i64, { i64, i1 } } } %xd, 1
    %a1a = extractvalue { i64, { i64, i1 } } %xaa, 0
    %xba = extractvalue { i64, { i64, i1 } } %xaa, 1
    %a1b = extractvalue { i64, i1 } %xba, 0
    %a2b = extractvalue { i64, i1 } %xba, 1
    %x5 = add i1 %a2b, 1
    br i1 %x5, label %while_body, label %while_end

  while_body:
    %a11 = extractvalue { i64*, { i64, { i64, i1 } } } %xd, 0
    %xaa1 = extractvalue { i64*, { i64, { i64, i1 } } } %xd, 1
    %a1a1 = extractvalue { i64, { i64, i1 } } %xaa1, 0
    %xba1 = extractvalue { i64, { i64, i1 } } %xaa1, 1
    %a1b1 = extractvalue { i64, i1 } %xba1, 0
    %a2b1 = extractvalue { i64, i1 } %xba1, 1
    br label %while_starta

  while_starta:
    %s = phi i64 [ %x6, %while_bodya ], [ %a1a1, %while_body ]
    %xca = getelementptr i64, i64* %a11, i64 %s
    %r = load i64, i64* %xca
    %xda = insertvalue { i64, i64* } zeroinitializer, i64 %r, 0
    %xe = insertvalue { i64, i64* } %xda, i64* %a11, 1
    %a1c = extractvalue { i64, i64* } %xe, 0
    %a2 = extractvalue { i64, i64* } %xe, 1
    %xf = getelementptr i64, i64* %a2, i64 %x2
    %ra = load i64, i64* %xf
    %xg = insertvalue { i64, i64* } zeroinitializer, i64 %ra, 0
    %xh = insertvalue { i64, i64* } %xg, i64* %a2, 1
    %a1aa = extractvalue { i64, i64* } %xh, 0
    %a2a = extractvalue { i64, i64* } %xh, 1
    %xi = icmp ult i64 %a1c, %a1aa
    %p = getelementptr i64, i64* %a2a, i64 %s
    store i64 %a1c, i64* %p
    %pa = getelementptr i64, i64* %a2a, i64 %x2
    store i64 %a1aa, i64* %pa
    br i1 %xi, label %while_bodya, label %while_enda

  while_bodya:
    %x6 = add i64 %s, 1
    br label %while_starta

  while_enda:
    %xda1 = sub i64 %a1b1, 1
    br label %while_startb

  while_startb:
    %s1 = phi i64 [ %x7, %while_bodyb ], [ %xda1, %while_enda ]
    %xea = getelementptr i64, i64* %a11, i64 %x2
    %r1 = load i64, i64* %xea
    %xf1 = insertvalue { i64, i64* } zeroinitializer, i64 %r1, 0
    %xg1 = insertvalue { i64, i64* } %xf1, i64* %a11, 1
    %a1c1 = extractvalue { i64, i64* } %xg1, 0
    %a21 = extractvalue { i64, i64* } %xg1, 1
    %xh1 = getelementptr i64, i64* %a21, i64 %s1
    %ra1 = load i64, i64* %xh1
    %xi1 = insertvalue { i64, i64* } zeroinitializer, i64 %ra1, 0
    %xj = insertvalue { i64, i64* } %xi1, i64* %a21, 1
    %a1aa1 = extractvalue { i64, i64* } %xj, 0
    %a2a1 = extractvalue { i64, i64* } %xj, 1
    %xk = icmp ult i64 %a1c1, %a1aa1
    %p1 = getelementptr i64, i64* %a2a1, i64 %x2
    store i64 %a1c1, i64* %p1
    %pa1 = getelementptr i64, i64* %a2a1, i64 %s1
    store i64 %a1aa1, i64* %pa1
    br i1 %xk, label %while_bodyb, label %while_endb

  while_bodyb:
    %x7 = sub i64 %s1, 1
    br label %while_startb

  while_endb:
    %xf2 = icmp slt i64 %s, %s1
    %xga = add i1 %xf2, 1
    br i1 %xga, label %then, label %else

  then:
    %xh2 = insertvalue { i64*, { i64, { i64, i1 } } } zeroinitializer, i64* %a11, 0
    %xi2 = insertvalue { i64, i1 } zeroinitializer, i64 %s1, 0
    %tmpea = insertvalue { i64, i1 } %xi2, i1 1, 1
    %xj1 = insertvalue { i64, { i64, i1 } } zeroinitializer, i64 %s, 0
    %x8 = insertvalue { i64, { i64, i1 } } %xj1, { i64, i1 } %tmpea, 1
    %x9 = insertvalue { i64*, { i64, { i64, i1 } } } %xh2, { i64, { i64, i1 } } %x8, 1
    br label %ctd_if

  else:
    %xh3 = call i64* @Proto_IICF_EOArray_swap_eo_impl (i64* %a11, i64 %s, i64 %s1)
    %xia = add i64 %s, 1
    %xj2 = insertvalue { i64*, { i64, { i64, i1 } } } zeroinitializer, i64* %xh3, 0
    %xk1 = insertvalue { i64, i1 } zeroinitializer, i64 %s1, 0
    %tmpea1 = insertvalue { i64, i1 } %xk1, i1 0, 1
    %xl = insertvalue { i64, { i64, i1 } } zeroinitializer, i64 %xia, 0
    %x10 = insertvalue { i64, { i64, i1 } } %xl, { i64, i1 } %tmpea1, 1
    %x11 = insertvalue { i64*, { i64, { i64, i1 } } } %xj2, { i64, { i64, i1 } } %x10, 1
    br label %ctd_if

  ctd_if:
    %x12 = phi { i64*, { i64, { i64, i1 } } } [ %x11, %else ], [ %x9, %then ]
    br label %while_start

  while_end:
    %a12 = extractvalue { i64*, { i64, { i64, i1 } } } %xd, 0
    %xaa2 = extractvalue { i64*, { i64, { i64, i1 } } } %xd, 1
    %a1a2 = extractvalue { i64, { i64, i1 } } %xaa2, 0
    %xba2 = extractvalue { i64, { i64, i1 } } %xaa2, 1
    %a1b2 = extractvalue { i64, i1 } %xba2, 0
    %a2b2 = extractvalue { i64, i1 } %xba2, 1
    %xca2 = insertvalue { i64*, i64 } zeroinitializer, i64* %a12, 0
    %x13 = insertvalue { i64*, i64 } %xca2, i64 %a1a2, 1
    ret { i64*, i64 } %x13
}

define i64* @introsort_aux(i64* %x, i64 %x1, i64 %x2, i64 %x3) {

  start:
    %x4 = insertvalue { i64, i64 } zeroinitializer, i64 %x2, 0
    %tmpa = insertvalue { i64, i64 } %x4, i64 %x3, 1
    %xa = insertvalue { i64, { i64, i64 } } zeroinitializer, i64 %x1, 0
    %tmpab = insertvalue { i64, { i64, i64 } } %xa, { i64, i64 } %tmpa, 1
    %xb = insertvalue { i64*, { i64, { i64, i64 } } } zeroinitializer, i64* %x, 0
    %x5 = insertvalue { i64*, { i64, { i64, i64 } } } %xb, { i64, { i64, i64 } } %tmpab, 1
    %x6 = call i64* @Sorting_Introsort_unat_sort_introsort_qs_aux_impl_f_04869164 ({ i64*, { i64, { i64, i64 } } } %x5)
    ret i64* %x6
}

define { i64, { i64, i8* } }* @Sorting_Introsort_str_sort_introsort_qs_aux_impl_f_04889284({ { i64, { i64, i8* } }*, { i64, { i64, i64 } } } %x) {

  start:
    %a1 = extractvalue { { i64, { i64, i8* } }*, { i64, { i64, i64 } } } %x, 0
    %xaa = extractvalue { { i64, { i64, i8* } }*, { i64, { i64, i64 } } } %x, 1
    %a1a = extractvalue { i64, { i64, i64 } } %xaa, 0
    %xba = extractvalue { i64, { i64, i64 } } %xaa, 1
    %a1b = extractvalue { i64, i64 } %xba, 0
    %a2b = extractvalue { i64, i64 } %xba, 1
    %xca = sub i64 %a1b, %a1a
    %xd = icmp slt i64 16, %xca
    br i1 %xd, label %then, label %else

  then:
    %xe = icmp slt i64 0, %a2b
    br i1 %xe, label %thena, label %elsea

  thena:
    %xf = sub i64 %a1b, %a1a
    %xga = udiv i64 %xf, 2
    %xh = add i64 %a1a, %xga
    %xia = add i64 %a1a, 1
    %xja = sub i64 %a1b, 1
    %xk = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a1, i64 %xia
    %r = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xk
    %xl = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %r, 0
    %xm = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xl, { i64, { i64, i8* } }* %a1, 1
    %a1c = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xm, 0
    %a2 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xm, 1
    %xn = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2, i64 %xh
    %ra = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xn
    %xo = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %ra, 0
    %xp = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xo, { i64, { i64, i8* } }* %a2, 1
    %a1aa = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xp, 0
    %a2a = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xp, 1
    %xq = call i1 @Sorting_Strings_strcmp_impl ({ i64, { i64, i8* } } %a1c, { i64, { i64, i8* } } %a1aa)
    %p = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2a, i64 %xia
    store { i64, { i64, i8* } } %a1c, { i64, { i64, i8* } }* %p
    %pa = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2a, i64 %xh
    store { i64, { i64, i8* } } %a1aa, { i64, { i64, i8* } }* %pa
    br i1 %xq, label %thenb, label %elseb

  thenb:
    %xu = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a1, i64 %xh
    %rb = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xu
    %xv = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %rb, 0
    %xw = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xv, { i64, { i64, i8* } }* %a1, 1
    %a1d = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xw, 0
    %a2c = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xw, 1
    %xx = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2c, i64 %xja
    %rc = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xx
    %xy = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %rc, 0
    %xz = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xy, { i64, { i64, i8* } }* %a2c, 1
    %a1ab = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xz, 0
    %a2aa = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xz, 1
    %ya = call i1 @Sorting_Strings_strcmp_impl ({ i64, { i64, i8* } } %a1d, { i64, { i64, i8* } } %a1ab)
    %pb = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2aa, i64 %xh
    store { i64, { i64, i8* } } %a1d, { i64, { i64, i8* } }* %pb
    %pc = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2aa, i64 %xja
    store { i64, { i64, i8* } } %a1ab, { i64, { i64, i8* } }* %pc
    br i1 %ya, label %thenc, label %elsec

  thenc:
    %x1 = call { i64, { i64, i8* } }* @Proto_IICF_EOArray_swap_eo_impl1 ({ i64, { i64, i8* } }* %a1, i64 %a1a, i64 %xh)
    br label %ctd_ifc

  elsec:
    %ye = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a1, i64 %xia
    %rd = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %ye
    %yf = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %rd, 0
    %yg = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %yf, { i64, { i64, i8* } }* %a1, 1
    %a1e = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %yg, 0
    %a2d = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %yg, 1
    %yh = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2d, i64 %xja
    %re = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %yh
    %yi = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %re, 0
    %yj = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %yi, { i64, { i64, i8* } }* %a2d, 1
    %a1ac = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %yj, 0
    %a2ab = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %yj, 1
    %yk = call i1 @Sorting_Strings_strcmp_impl ({ i64, { i64, i8* } } %a1e, { i64, { i64, i8* } } %a1ac)
    %pd = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2ab, i64 %xia
    store { i64, { i64, i8* } } %a1e, { i64, { i64, i8* } }* %pd
    %pe = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2ab, i64 %xja
    store { i64, { i64, i8* } } %a1ac, { i64, { i64, i8* } }* %pe
    br i1 %yk, label %thend, label %elsed

  thend:
    %x2 = call { i64, { i64, i8* } }* @Proto_IICF_EOArray_swap_eo_impl1 ({ i64, { i64, i8* } }* %a1, i64 %a1a, i64 %xja)
    br label %ctd_ifd

  elsed:
    %x3 = call { i64, { i64, i8* } }* @Proto_IICF_EOArray_swap_eo_impl1 ({ i64, { i64, i8* } }* %a1, i64 %a1a, i64 %xia)
    br label %ctd_ifd

  ctd_ifd:
    %x4 = phi { i64, { i64, i8* } }* [ %x3, %elsed ], [ %x2, %thend ]
    br label %ctd_ifc

  ctd_ifc:
    %x5 = phi { i64, { i64, i8* } }* [ %x4, %ctd_ifd ], [ %x1, %thenc ]
    br label %ctd_ifb

  elseb:
    %xu1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a1, i64 %xia
    %rb1 = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xu1
    %xv1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %rb1, 0
    %xw1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xv1, { i64, { i64, i8* } }* %a1, 1
    %a1d1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xw1, 0
    %a2c1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xw1, 1
    %xx1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2c1, i64 %xja
    %rc1 = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %xx1
    %xy1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %rc1, 0
    %xz1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xy1, { i64, { i64, i8* } }* %a2c1, 1
    %a1ab1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xz1, 0
    %a2aa1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %xz1, 1
    %ya1 = call i1 @Sorting_Strings_strcmp_impl ({ i64, { i64, i8* } } %a1d1, { i64, { i64, i8* } } %a1ab1)
    %pb1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2aa1, i64 %xia
    store { i64, { i64, i8* } } %a1d1, { i64, { i64, i8* } }* %pb1
    %pc1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2aa1, i64 %xja
    store { i64, { i64, i8* } } %a1ab1, { i64, { i64, i8* } }* %pc1
    br i1 %ya1, label %thene, label %elsee

  thene:
    %x6 = call { i64, { i64, i8* } }* @Proto_IICF_EOArray_swap_eo_impl1 ({ i64, { i64, i8* } }* %a1, i64 %a1a, i64 %xia)
    br label %ctd_ife

  elsee:
    %ye1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a1, i64 %xh
    %rd1 = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %ye1
    %yf1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %rd1, 0
    %yg1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %yf1, { i64, { i64, i8* } }* %a1, 1
    %a1e1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %yg1, 0
    %a2d1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %yg1, 1
    %yh1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2d1, i64 %xja
    %re1 = load { i64, { i64, i8* } }, { i64, { i64, i8* } }* %yh1
    %yi1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } zeroinitializer, { i64, { i64, i8* } } %re1, 0
    %yj1 = insertvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %yi1, { i64, { i64, i8* } }* %a2d1, 1
    %a1ac1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %yj1, 0
    %a2ab1 = extractvalue { { i64, { i64, i8* } }, { i64, { i64, i8* } }* } %yj1, 1
    %yk1 = call i1 @Sorting_Strings_strcmp_impl ({ i64, { i64, i8* } } %a1e1, { i64, { i64, i8* } } %a1ac1)
    %pd1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2ab1, i64 %xh
    store { i64, { i64, i8* } } %a1e1, { i64, { i64, i8* } }* %pd1
    %pe1 = getelementptr { i64, { i64, i8* } }, { i64, { i64, i8* } }* %a2ab1, i64 %xja
    store { i64, { i64, i8* } } %a1ac1, { i64, { i64, i8* } }* %pe1
    br i1 %yk1, label %thenf, label %elsef

  thenf:
    %x7 = call { i64, { i64, i8* } }* @Proto_IICF_EOArray_swap_eo_impl1 ({ i64, { i64, i8* } }* %a1, i64 %a1a, i64 %xja)
    br label %ctd_iff

  elsef:
    %x8 = call { i64, { i64, i8* } }* @Proto_IICF_EOArray_swap_eo_impl1 ({ i64, { i64, i8* } }* %a1, i64 %a1a, i64 %xh)
    br label %ctd_iff

  ctd_iff:
    %x9 = phi { i64, { i64, i8* } }* [ %x8, %elsef ], [ %x7, %thenf ]
    br label %ctd_ife

  ctd_ife:
    %x10 = phi { i64, { i64, i8* } }* [ %x9, %ctd_iff ], [ %x6, %thene ]
    br label %ctd_ifb

  ctd_ifb:
    %xu2 = phi { i64, { i64, i8* } }* [ %x10, %ctd_ife ], [ %x5, %ctd_ifc ]
    %xva = add i64 %a1a, 1
    %xw2 = call { { i64, { i64, i8* } }*, i64 } @Sorting_Introsort_str_sort_qs_partition_impl (i64 %xva, i64 %a1b, i64 %a1a, { i64, { i64, i8* } }* %xu2)
    %a = extractvalue { { i64, { i64, i8* } }*, i64 } %xw2, 0
    %b = extractvalue { { i64, { i64, i8* } }*, i64 } %xw2, 1
    %xx2 = insertvalue { { i64, { i64, i8* } }*, i64 } zeroinitializer, { i64, { i64, i8* } }* %a, 0
    %xy2 = insertvalue { { i64, { i64, i8* } }*, i64 } %xx2, i64 %b, 1
    %a1ca = extractvalue { { i64, { i64, i8* } }*, i64 } %xy2, 0
    %a2c2 = extractvalue { { i64, { i64, i8* } }*, i64 } %xy2, 1
    %xza = sub i64 %a2b, 1
    %ya2 = insertvalue { i64, i64 } zeroinitializer, i64 %a2c2, 0
    %tmpga = insertvalue { i64, i64 } %ya2, i64 %xza, 1
    %yb = insertvalue { i64, { i64, i64 } } zeroinitializer, i64 %a1a, 0
    %tmpha = insertvalue { i64, { i64, i64 } } %yb, { i64, i64 } %tmpga, 1
    %yc = insertvalue { { i64, { i64, i8* } }*, { i64, { i64, i64 } } } zeroinitializer, { i64, { i64, i8* } }* %a1ca, 0
    %yd = insertvalue { { i64, { i64, i8* } }*, { i64, { i64, i64 } } } %yc, { i64, { i64, i64 } } %tmpha, 1
    %yaa = call { i64, { i64, i8* } }* @Sorting_Introsort_str_sort_introsort_qs_aux_impl_f_04889284 ({ { i64, { i64, i8* } }*, { i64, { i64, i64 } } } %yd)
    %yba = sub i64 %a2b, 1
    %yf2 = insertvalue { i64, i64 } zeroinitializer, i64 %a1b, 0
    %tmpib = insertvalue { i64, i64 } %yf2, i64 %yba, 1
    %yg2 = insertvalue { i64, { i64, i64 } } zeroinitializer, i64 %a2c2, 0
    %tmpja = insertvalue { i64, { i64, i64 } } %yg2, { i64, i64 } %tmpib, 1
    %yh2 = insertvalue { { i64, { i64, i8* } }*, { i64, { i64, i64 } } } zeroinitializer, { i64, { i64, i8* } }* %yaa, 0
    %x11 = insertvalue { { i64, { i64, i8* } }*, { i64, { i64, i64 } } } %yh2, { i64, { i64, i64 } } %tmpja, 1
    %x12 = call { i64, { i64, i8* } }* @Sorting_Introsort_str_sort_introsort_qs_aux_impl_f_04889284 ({ { i64, { i64, i8* } }*, { i64, { i64, i64 } } } %x11)
    br label %ctd_ifa

  elsea:
    %x13 = call { i64, { i64, i8* } }* @Sorting_Introsort_str_sort_heapsort_impl ({ i64, { i64, i8* } }* %a1, i64 %a1a, i64 %a1b)
    br label %ctd_ifa

  ctd_ifa:
    %x14 = phi { i64, { i64, i8* } }* [ %x13, %elsea ], [ %x12, %ctd_ifb ]
    br label %ctd_if

  else:
    br label %ctd_if

  ctd_if:
    %x15 = phi { i64, { i64, i8* } }* [ %a1, %else ], [ %x14, %ctd_ifa ]
    ret { i64, { i64, i8* } }* %x15
}

define i64* @Sorting_Introsort_unat_sort_introsort_qs_aux_impl_f_04869164({ i64*, { i64, { i64, i64 } } } %x) {

  start:
    %a1 = extractvalue { i64*, { i64, { i64, i64 } } } %x, 0
    %xaa = extractvalue { i64*, { i64, { i64, i64 } } } %x, 1
    %a1a = extractvalue { i64, { i64, i64 } } %xaa, 0
    %xba = extractvalue { i64, { i64, i64 } } %xaa, 1
    %a1b = extractvalue { i64, i64 } %xba, 0
    %a2b = extractvalue { i64, i64 } %xba, 1
    %xca = sub i64 %a1b, %a1a
    %xd = icmp slt i64 16, %xca
    br i1 %xd, label %then, label %else

  then:
    %xe = icmp slt i64 0, %a2b
    br i1 %xe, label %thena, label %elsea

  thena:
    %xf = sub i64 %a1b, %a1a
    %xga = udiv i64 %xf, 2
    %xh = add i64 %a1a, %xga
    %xia = add i64 %a1a, 1
    %xja = sub i64 %a1b, 1
    %xk = getelementptr i64, i64* %a1, i64 %xia
    %r = load i64, i64* %xk
    %xl = insertvalue { i64, i64* } zeroinitializer, i64 %r, 0
    %xm = insertvalue { i64, i64* } %xl, i64* %a1, 1
    %a1c = extractvalue { i64, i64* } %xm, 0
    %a2 = extractvalue { i64, i64* } %xm, 1
    %xn = getelementptr i64, i64* %a2, i64 %xh
    %ra = load i64, i64* %xn
    %xo = insertvalue { i64, i64* } zeroinitializer, i64 %ra, 0
    %xp = insertvalue { i64, i64* } %xo, i64* %a2, 1
    %a1aa = extractvalue { i64, i64* } %xp, 0
    %a2a = extractvalue { i64, i64* } %xp, 1
    %xq = icmp ult i64 %a1c, %a1aa
    %p = getelementptr i64, i64* %a2a, i64 %xia
    store i64 %a1c, i64* %p
    %pa = getelementptr i64, i64* %a2a, i64 %xh
    store i64 %a1aa, i64* %pa
    br i1 %xq, label %thenb, label %elseb

  thenb:
    %xu = getelementptr i64, i64* %a1, i64 %xh
    %rb = load i64, i64* %xu
    %xv = insertvalue { i64, i64* } zeroinitializer, i64 %rb, 0
    %xw = insertvalue { i64, i64* } %xv, i64* %a1, 1
    %a1d = extractvalue { i64, i64* } %xw, 0
    %a2c = extractvalue { i64, i64* } %xw, 1
    %xx = getelementptr i64, i64* %a2c, i64 %xja
    %rc = load i64, i64* %xx
    %xy = insertvalue { i64, i64* } zeroinitializer, i64 %rc, 0
    %xz = insertvalue { i64, i64* } %xy, i64* %a2c, 1
    %a1ab = extractvalue { i64, i64* } %xz, 0
    %a2aa = extractvalue { i64, i64* } %xz, 1
    %ya = icmp ult i64 %a1d, %a1ab
    %pb = getelementptr i64, i64* %a2aa, i64 %xh
    store i64 %a1d, i64* %pb
    %pc = getelementptr i64, i64* %a2aa, i64 %xja
    store i64 %a1ab, i64* %pc
    br i1 %ya, label %thenc, label %elsec

  thenc:
    %x1 = call i64* @Proto_IICF_EOArray_swap_eo_impl (i64* %a1, i64 %a1a, i64 %xh)
    br label %ctd_ifc

  elsec:
    %ye = getelementptr i64, i64* %a1, i64 %xia
    %rd = load i64, i64* %ye
    %yf = insertvalue { i64, i64* } zeroinitializer, i64 %rd, 0
    %yg = insertvalue { i64, i64* } %yf, i64* %a1, 1
    %a1e = extractvalue { i64, i64* } %yg, 0
    %a2d = extractvalue { i64, i64* } %yg, 1
    %yh = getelementptr i64, i64* %a2d, i64 %xja
    %re = load i64, i64* %yh
    %yi = insertvalue { i64, i64* } zeroinitializer, i64 %re, 0
    %yj = insertvalue { i64, i64* } %yi, i64* %a2d, 1
    %a1ac = extractvalue { i64, i64* } %yj, 0
    %a2ab = extractvalue { i64, i64* } %yj, 1
    %yk = icmp ult i64 %a1e, %a1ac
    %pd = getelementptr i64, i64* %a2ab, i64 %xia
    store i64 %a1e, i64* %pd
    %pe = getelementptr i64, i64* %a2ab, i64 %xja
    store i64 %a1ac, i64* %pe
    br i1 %yk, label %thend, label %elsed

  thend:
    %x2 = call i64* @Proto_IICF_EOArray_swap_eo_impl (i64* %a1, i64 %a1a, i64 %xja)
    br label %ctd_ifd

  elsed:
    %x3 = call i64* @Proto_IICF_EOArray_swap_eo_impl (i64* %a1, i64 %a1a, i64 %xia)
    br label %ctd_ifd

  ctd_ifd:
    %x4 = phi i64* [ %x3, %elsed ], [ %x2, %thend ]
    br label %ctd_ifc

  ctd_ifc:
    %x5 = phi i64* [ %x4, %ctd_ifd ], [ %x1, %thenc ]
    br label %ctd_ifb

  elseb:
    %xu1 = getelementptr i64, i64* %a1, i64 %xia
    %rb1 = load i64, i64* %xu1
    %xv1 = insertvalue { i64, i64* } zeroinitializer, i64 %rb1, 0
    %xw1 = insertvalue { i64, i64* } %xv1, i64* %a1, 1
    %a1d1 = extractvalue { i64, i64* } %xw1, 0
    %a2c1 = extractvalue { i64, i64* } %xw1, 1
    %xx1 = getelementptr i64, i64* %a2c1, i64 %xja
    %rc1 = load i64, i64* %xx1
    %xy1 = insertvalue { i64, i64* } zeroinitializer, i64 %rc1, 0
    %xz1 = insertvalue { i64, i64* } %xy1, i64* %a2c1, 1
    %a1ab1 = extractvalue { i64, i64* } %xz1, 0
    %a2aa1 = extractvalue { i64, i64* } %xz1, 1
    %ya1 = icmp ult i64 %a1d1, %a1ab1
    %pb1 = getelementptr i64, i64* %a2aa1, i64 %xia
    store i64 %a1d1, i64* %pb1
    %pc1 = getelementptr i64, i64* %a2aa1, i64 %xja
    store i64 %a1ab1, i64* %pc1
    br i1 %ya1, label %thene, label %elsee

  thene:
    %x6 = call i64* @Proto_IICF_EOArray_swap_eo_impl (i64* %a1, i64 %a1a, i64 %xia)
    br label %ctd_ife

  elsee:
    %ye1 = getelementptr i64, i64* %a1, i64 %xh
    %rd1 = load i64, i64* %ye1
    %yf1 = insertvalue { i64, i64* } zeroinitializer, i64 %rd1, 0
    %yg1 = insertvalue { i64, i64* } %yf1, i64* %a1, 1
    %a1e1 = extractvalue { i64, i64* } %yg1, 0
    %a2d1 = extractvalue { i64, i64* } %yg1, 1
    %yh1 = getelementptr i64, i64* %a2d1, i64 %xja
    %re1 = load i64, i64* %yh1
    %yi1 = insertvalue { i64, i64* } zeroinitializer, i64 %re1, 0
    %yj1 = insertvalue { i64, i64* } %yi1, i64* %a2d1, 1
    %a1ac1 = extractvalue { i64, i64* } %yj1, 0
    %a2ab1 = extractvalue { i64, i64* } %yj1, 1
    %yk1 = icmp ult i64 %a1e1, %a1ac1
    %pd1 = getelementptr i64, i64* %a2ab1, i64 %xh
    store i64 %a1e1, i64* %pd1
    %pe1 = getelementptr i64, i64* %a2ab1, i64 %xja
    store i64 %a1ac1, i64* %pe1
    br i1 %yk1, label %thenf, label %elsef

  thenf:
    %x7 = call i64* @Proto_IICF_EOArray_swap_eo_impl (i64* %a1, i64 %a1a, i64 %xja)
    br label %ctd_iff

  elsef:
    %x8 = call i64* @Proto_IICF_EOArray_swap_eo_impl (i64* %a1, i64 %a1a, i64 %xh)
    br label %ctd_iff

  ctd_iff:
    %x9 = phi i64* [ %x8, %elsef ], [ %x7, %thenf ]
    br label %ctd_ife

  ctd_ife:
    %x10 = phi i64* [ %x9, %ctd_iff ], [ %x6, %thene ]
    br label %ctd_ifb

  ctd_ifb:
    %xu2 = phi i64* [ %x10, %ctd_ife ], [ %x5, %ctd_ifc ]
    %xva = add i64 %a1a, 1
    %xw2 = call { i64*, i64 } @Sorting_Introsort_unat_sort_qs_partition_impl (i64 %xva, i64 %a1b, i64 %a1a, i64* %xu2)
    %a = extractvalue { i64*, i64 } %xw2, 0
    %b = extractvalue { i64*, i64 } %xw2, 1
    %xx2 = insertvalue { i64*, i64 } zeroinitializer, i64* %a, 0
    %xy2 = insertvalue { i64*, i64 } %xx2, i64 %b, 1
    %a1ca = extractvalue { i64*, i64 } %xy2, 0
    %a2c2 = extractvalue { i64*, i64 } %xy2, 1
    %xza = sub i64 %a2b, 1
    %ya2 = insertvalue { i64, i64 } zeroinitializer, i64 %a2c2, 0
    %tmpga = insertvalue { i64, i64 } %ya2, i64 %xza, 1
    %yb = insertvalue { i64, { i64, i64 } } zeroinitializer, i64 %a1a, 0
    %tmpha = insertvalue { i64, { i64, i64 } } %yb, { i64, i64 } %tmpga, 1
    %yc = insertvalue { i64*, { i64, { i64, i64 } } } zeroinitializer, i64* %a1ca, 0
    %yd = insertvalue { i64*, { i64, { i64, i64 } } } %yc, { i64, { i64, i64 } } %tmpha, 1
    %yaa = call i64* @Sorting_Introsort_unat_sort_introsort_qs_aux_impl_f_04869164 ({ i64*, { i64, { i64, i64 } } } %yd)
    %yba = sub i64 %a2b, 1
    %yf2 = insertvalue { i64, i64 } zeroinitializer, i64 %a1b, 0
    %tmpib = insertvalue { i64, i64 } %yf2, i64 %yba, 1
    %yg2 = insertvalue { i64, { i64, i64 } } zeroinitializer, i64 %a2c2, 0
    %tmpja = insertvalue { i64, { i64, i64 } } %yg2, { i64, i64 } %tmpib, 1
    %yh2 = insertvalue { i64*, { i64, { i64, i64 } } } zeroinitializer, i64* %yaa, 0
    %x11 = insertvalue { i64*, { i64, { i64, i64 } } } %yh2, { i64, { i64, i64 } } %tmpja, 1
    %x12 = call i64* @Sorting_Introsort_unat_sort_introsort_qs_aux_impl_f_04869164 ({ i64*, { i64, { i64, i64 } } } %x11)
    br label %ctd_ifa

  elsea:
    %x13 = call i64* @heapsort (i64* %a1, i64 %a1a, i64 %a1b)
    br label %ctd_ifa

  ctd_ifa:
    %x14 = phi i64* [ %x13, %elsea ], [ %x12, %ctd_ifb ]
    br label %ctd_if

  else:
    br label %ctd_if

  ctd_if:
    %x15 = phi i64* [ %a1, %else ], [ %x14, %ctd_ifa ]
    ret i64* %x15
}
